// Compiled by ClojureScript 1.9.293 {:static-fns true, :optimize-constants true}
goog.provide('amentum.docs.views.elements');
goog.require('cljs.core');
goog.require('amentum.collections');
goog.require('javelin.core');
goog.require('amentum.docs.core');
goog.require('hoplon.core');
goog.require('amentum.elements');
goog.require('clojure.string');
amentum.docs.views.elements.colors = new cljs.core.PersistentVector(null, 13, 5, cljs.core.PersistentVector.EMPTY_NODE, ["red","orange","yellow","olive","green","teal","blue","violet","purple","pink","brown","grey","black"], null);
amentum.docs.views.elements.lorem = "Lorem ipsum dolor sit amet, consectetur adipiscing\n  elit. Curabitur a orci ac ante ultricies mattis. Nunc elementum quam\n  et mauris iaculis viverra.";
amentum.docs.views.elements.networks = new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, ["facebook","Facebook"], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, ["twitter","Twitter"], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, ["google plus","Google Plus"], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, ["vk","VK"], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, ["linkedin","LinkedIn"], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, ["instagram","Instagram"], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, ["youtube","YouTube"], null)], null);
amentum.docs.views.elements.button = (function amentum$docs$views$elements$button(){
return new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$header,"Button",cljs.core.cst$kw$sub_DASH_header,"A button indicates a possible user action",cljs.core.cst$kw$content,new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [amentum.docs.core.section.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.cst$kw$title,"Types",amentum.docs.core.example.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.cst$kw$source,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$count,1,cljs.core.cst$kw$text,"<span style=\"font-weight:bold;color:red\">(</span><span style=\"font-weight:bold;color:blue\">let</span>\n<span style=\"font-weight:bold;color:red\"> [</span>c <span style=\"font-weight:bold;color:red\">(</span><span style=\"font-weight:bold;color:blue\">j/cell</span> <span style=\"color:green\">false</span><span style=\"font-weight:bold;color:red\">)</span><span style=\"font-weight:bold;color:red\">]</span>\n<span style=\"font-weight:bold;color:red\"> (</span><span style=\"font-weight:bold;color:blue\">e/button</span>\n<span style=\"font-weight:bold;color:yellow\">  :class</span>\n<span style=\"font-weight:bold;color:red\">  (</span><span style=\"font-weight:bold;color:blue\">j/cell=</span> <span style=\"font-weight:bold;color:red\">{</span><span style=\"font-weight:bold;color:yellow\">:active</span> c<span style=\"font-weight:bold;color:red\">}</span><span style=\"font-weight:bold;color:red\">)</span>\n<span style=\"font-weight:bold;color:yellow\">  :click</span>\n<span style=\"font-weight:bold;color:red\">  (</span><span style=\"font-weight:bold;color:blue\">fn*</span> <span style=\"font-weight:bold;color:red\">[</span><span style=\"font-weight:bold;color:red\">]</span> <span style=\"font-weight:bold;color:red\">(</span><span style=\"font-weight:bold;color:blue\">swap!</span> c not<span style=\"font-weight:bold;color:red\">)</span><span style=\"font-weight:bold;color:red\">)</span>\n<span style=\"font-weight:bold;color:red\">  (</span><span style=\"font-weight:bold;color:blue\">j/cell=</span> <span style=\"font-weight:bold;color:red\">(</span><span style=\"font-weight:bold;color:blue\">if</span> c <span style=\"font-weight:bold;color:magenta\">&quot;Following&quot;</span> <span style=\"font-weight:bold;color:magenta\">&quot;Follow&quot;</span><span style=\"font-weight:bold;color:red\">)</span><span style=\"font-weight:bold;color:red\">)</span><span style=\"font-weight:bold;color:red\">)</span><span style=\"font-weight:bold;color:red\">)</span>"], null),cljs.core.cst$kw$title,"Button",(hoplon.core.p.cljs$core$IFn$_invoke$arity$1 ? hoplon.core.p.cljs$core$IFn$_invoke$arity$1("A standard button") : hoplon.core.p.call(null,"A standard button")),(function (){var c = javelin.core.cell.cljs$core$IFn$_invoke$arity$1(false);
return amentum.elements.button.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.cst$kw$class,javelin.core.formula(((function (c){
return (function (G__16896){
return new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$active,G__16896], null);
});})(c))
).call(null,c),cljs.core.cst$kw$click,((function (c){
return (function (){
return cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(c,cljs.core.not);
});})(c))
,javelin.core.formula(((function (c){
return (function (G__16897){
if(cljs.core.truth_(G__16897)){
return "Following";
} else {
return "Follow";
}
});})(c))
).call(null,c)], 0));
})()], 0)),amentum.docs.core.example.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.cst$kw$source,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$count,2,cljs.core.cst$kw$text,"<span style=\"font-weight:bold;color:red\">(</span><span style=\"font-weight:bold;color:blue\">e/button</span> <span style=\"font-weight:bold;color:yellow\">:type</span> <span style=\"font-weight:bold;color:magenta\">&quot;button&quot;</span> <span style=\"font-weight:bold;color:magenta\">&quot;Button&quot;</span><span style=\"font-weight:bold;color:red\">)</span><span style=\"font-weight:bold;color:red\">(</span><span style=\"font-weight:bold;color:blue\">e/button</span> <span style=\"font-weight:bold;color:yellow\">:tabindex</span> <span style=\"color:cyan\">0</span> <span style=\"font-weight:bold;color:magenta\">&quot;Focusable&quot;</span><span style=\"font-weight:bold;color:red\">)</span>"], null),cljs.core.cst$kw$class,"another",(function (){var G__16898 = cljs.core.cst$kw$class;
var G__16899 = "ui ignored warning message";
var G__16900 = "Although any tag can be used for a button, it will only be\n        keyboard focusable if you use a <button> tag or you add the\n        property tabindex=";
var G__16901 = (0);
var G__16902 = ". Keyboard accessible buttons will\n        preserve focus styles after click, which may be visually\n        jarring.";
return (hoplon.core.div.cljs$core$IFn$_invoke$arity$5 ? hoplon.core.div.cljs$core$IFn$_invoke$arity$5(G__16898,G__16899,G__16900,G__16901,G__16902) : hoplon.core.div.call(null,G__16898,G__16899,G__16900,G__16901,G__16902));
})(),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [amentum.elements.button.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.cst$kw$type,"button","Button"], 0)),amentum.elements.button.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.cst$kw$tabindex,(0),"Focusable"], 0))], null)], 0)),amentum.docs.core.example.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.cst$kw$source,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$count,2,cljs.core.cst$kw$text,"<span style=\"font-weight:bold;color:red\">(</span><span style=\"font-weight:bold;color:blue\">e/button</span> <span style=\"font-weight:bold;color:yellow\">:class</span> <span style=\"font-weight:bold;color:magenta\">&quot;primary&quot;</span> <span style=\"font-weight:bold;color:magenta\">&quot;Save&quot;</span><span style=\"font-weight:bold;color:red\">)</span><span style=\"font-weight:bold;color:red\">(</span><span style=\"font-weight:bold;color:blue\">e/button</span> <span style=\"font-weight:bold;color:magenta\">&quot;Discard&quot;</span><span style=\"font-weight:bold;color:red\">)</span>"], null),cljs.core.cst$kw$title,"Emphasis",(hoplon.core.p.cljs$core$IFn$_invoke$arity$1 ? hoplon.core.p.cljs$core$IFn$_invoke$arity$1("A button can be formatted to show different levels of emphasis") : hoplon.core.p.call(null,"A button can be formatted to show different levels of emphasis")),(function (){var G__16903 = cljs.core.cst$kw$class;
var G__16904 = "ui ignored info message";
var G__16905 = "Setting your brand colors to primary and secondary color\n         variables in ";
var G__16906 = (function (){var G__16908 = cljs.core.cst$kw$href;
var G__16909 = "semantic-ui.com/usage/theming.html";
var G__16910 = (hoplon.core.code.cljs$core$IFn$_invoke$arity$1 ? hoplon.core.code.cljs$core$IFn$_invoke$arity$1("site-variables") : hoplon.core.code.call(null,"site-variables"));
return (hoplon.core.a.cljs$core$IFn$_invoke$arity$3 ? hoplon.core.a.cljs$core$IFn$_invoke$arity$3(G__16908,G__16909,G__16910) : hoplon.core.a.call(null,G__16908,G__16909,G__16910));
})();
var G__16907 = " will allow you to use your color theming for UI elements";
return (hoplon.core.div.cljs$core$IFn$_invoke$arity$5 ? hoplon.core.div.cljs$core$IFn$_invoke$arity$5(G__16903,G__16904,G__16905,G__16906,G__16907) : hoplon.core.div.call(null,G__16903,G__16904,G__16905,G__16906,G__16907));
})(),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [amentum.elements.button.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.cst$kw$class,"primary","Save"], 0)),amentum.elements.button.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq(["Discard"], 0))], null)], 0)),amentum.docs.core.example.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.cst$kw$source,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$count,2,cljs.core.cst$kw$text,"<span style=\"font-weight:bold;color:red\">(</span><span style=\"font-weight:bold;color:blue\">e/button</span> <span style=\"font-weight:bold;color:yellow\">:class</span> <span style=\"font-weight:bold;color:magenta\">&quot;secondary&quot;</span> <span style=\"font-weight:bold;color:magenta\">&quot;Okay&quot;</span><span style=\"font-weight:bold;color:red\">)</span><span style=\"font-weight:bold;color:red\">(</span><span style=\"font-weight:bold;color:blue\">e/button</span> <span style=\"font-weight:bold;color:magenta\">&quot;Cancel&quot;</span><span style=\"font-weight:bold;color:red\">)</span>"], null),cljs.core.cst$kw$class,"another",new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [amentum.elements.button.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.cst$kw$class,"secondary","Okay"], 0)),amentum.elements.button.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq(["Cancel"], 0))], null)], 0)),amentum.docs.core.example.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.cst$kw$source,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$count,3,cljs.core.cst$kw$text,"<span style=\"font-weight:bold;color:red\">(</span><span style=\"font-weight:bold;color:blue\">e/button</span>\n<span style=\"font-weight:bold;color:yellow\"> :class</span>\n<span style=\"font-weight:bold;color:magenta\"> &quot;animated&quot;</span>\n<span style=\"font-weight:bold;color:red\"> (</span><span style=\"font-weight:bold;color:blue\">h/div</span> <span style=\"font-weight:bold;color:yellow\">:class</span> <span style=\"font-weight:bold;color:magenta\">&quot;visible content&quot;</span> <span style=\"font-weight:bold;color:magenta\">&quot;Next&quot;</span><span style=\"font-weight:bold;color:red\">)</span>\n<span style=\"font-weight:bold;color:red\"> (</span><span style=\"font-weight:bold;color:blue\">h/div</span> <span style=\"font-weight:bold;color:yellow\">:class</span> <span style=\"font-weight:bold;color:magenta\">&quot;hidden content&quot;</span> <span style=\"font-weight:bold;color:red\">(</span><span style=\"font-weight:bold;color:blue\">h/i</span> <span style=\"font-weight:bold;color:yellow\">:class</span> <span style=\"font-weight:bold;color:magenta\">&quot;right arrow icon&quot;</span><span style=\"font-weight:bold;color:red\">)</span><span style=\"font-weight:bold;color:red\">)</span><span style=\"font-weight:bold;color:red\">)</span><span style=\"font-weight:bold;color:red\">(</span><span style=\"font-weight:bold;color:blue\">e/button</span>\n<span style=\"font-weight:bold;color:yellow\"> :class</span>\n<span style=\"font-weight:bold;color:magenta\"> &quot;vertical animated&quot;</span>\n<span style=\"font-weight:bold;color:yellow\"> :tabindex</span>\n<span style=\"color:cyan\"> 0</span>\n<span style=\"font-weight:bold;color:red\"> (</span><span style=\"font-weight:bold;color:blue\">h/div</span> <span style=\"font-weight:bold;color:yellow\">:class</span> <span style=\"font-weight:bold;color:magenta\">&quot;visible content&quot;</span> <span style=\"font-weight:bold;color:magenta\">&quot;Shop&quot;</span><span style=\"font-weight:bold;color:red\">)</span>\n<span style=\"font-weight:bold;color:red\"> (</span><span style=\"font-weight:bold;color:blue\">h/div</span> <span style=\"font-weight:bold;color:yellow\">:class</span> <span style=\"font-weight:bold;color:magenta\">&quot;hidden content&quot;</span> <span style=\"font-weight:bold;color:red\">(</span><span style=\"font-weight:bold;color:blue\">h/i</span> <span style=\"font-weight:bold;color:yellow\">:class</span> <span style=\"font-weight:bold;color:magenta\">&quot;shop icon&quot;</span><span style=\"font-weight:bold;color:red\">)</span><span style=\"font-weight:bold;color:red\">)</span><span style=\"font-weight:bold;color:red\">)</span><span style=\"font-weight:bold;color:red\">(</span><span style=\"font-weight:bold;color:blue\">e/button</span>\n<span style=\"font-weight:bold;color:yellow\"> :class</span>\n<span style=\"font-weight:bold;color:magenta\"> &quot;animated fade&quot;</span>\n<span style=\"font-weight:bold;color:yellow\"> :tabindex</span>\n<span style=\"color:cyan\"> 0</span>\n<span style=\"font-weight:bold;color:red\"> (</span><span style=\"font-weight:bold;color:blue\">h/div</span> <span style=\"font-weight:bold;color:yellow\">:class</span> <span style=\"font-weight:bold;color:magenta\">&quot;visible content&quot;</span> <span style=\"font-weight:bold;color:magenta\">&quot;Sign up for a Pro account&quot;</span><span style=\"font-weight:bold;color:red\">)</span>\n<span style=\"font-weight:bold;color:red\"> (</span><span style=\"font-weight:bold;color:blue\">h/div</span> <span style=\"font-weight:bold;color:yellow\">:class</span> <span style=\"font-weight:bold;color:magenta\">&quot;hidden content&quot;</span> <span style=\"font-weight:bold;color:magenta\">&quot;$12.99 a month&quot;</span><span style=\"font-weight:bold;color:red\">)</span><span style=\"font-weight:bold;color:red\">)</span>"], null),cljs.core.cst$kw$title,"Animated",(hoplon.core.p.cljs$core$IFn$_invoke$arity$1 ? hoplon.core.p.cljs$core$IFn$_invoke$arity$1("A button can animate to show hidden content") : hoplon.core.p.call(null,"A button can animate to show hidden content")),(function (){var G__16911 = cljs.core.cst$kw$class;
var G__16912 = "ui ignored message";
var G__16913 = "The button will be automatically sized according to the\n           visible content size. Make sure there is enough room for the\n           hidden content to show";
return (hoplon.core.div.cljs$core$IFn$_invoke$arity$3 ? hoplon.core.div.cljs$core$IFn$_invoke$arity$3(G__16911,G__16912,G__16913) : hoplon.core.div.call(null,G__16911,G__16912,G__16913));
})(),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [amentum.elements.button.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.cst$kw$class,"animated",(function (){var G__16914 = cljs.core.cst$kw$class;
var G__16915 = "visible content";
var G__16916 = "Next";
return (hoplon.core.div.cljs$core$IFn$_invoke$arity$3 ? hoplon.core.div.cljs$core$IFn$_invoke$arity$3(G__16914,G__16915,G__16916) : hoplon.core.div.call(null,G__16914,G__16915,G__16916));
})(),(function (){var G__16917 = cljs.core.cst$kw$class;
var G__16918 = "hidden content";
var G__16919 = (function (){var G__16920 = cljs.core.cst$kw$class;
var G__16921 = "right arrow icon";
return (hoplon.core.i.cljs$core$IFn$_invoke$arity$2 ? hoplon.core.i.cljs$core$IFn$_invoke$arity$2(G__16920,G__16921) : hoplon.core.i.call(null,G__16920,G__16921));
})();
return (hoplon.core.div.cljs$core$IFn$_invoke$arity$3 ? hoplon.core.div.cljs$core$IFn$_invoke$arity$3(G__16917,G__16918,G__16919) : hoplon.core.div.call(null,G__16917,G__16918,G__16919));
})()], 0)),amentum.elements.button.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.cst$kw$class,"vertical animated",cljs.core.cst$kw$tabindex,(0),(function (){var G__16922 = cljs.core.cst$kw$class;
var G__16923 = "visible content";
var G__16924 = "Shop";
return (hoplon.core.div.cljs$core$IFn$_invoke$arity$3 ? hoplon.core.div.cljs$core$IFn$_invoke$arity$3(G__16922,G__16923,G__16924) : hoplon.core.div.call(null,G__16922,G__16923,G__16924));
})(),(function (){var G__16925 = cljs.core.cst$kw$class;
var G__16926 = "hidden content";
var G__16927 = (function (){var G__16928 = cljs.core.cst$kw$class;
var G__16929 = "shop icon";
return (hoplon.core.i.cljs$core$IFn$_invoke$arity$2 ? hoplon.core.i.cljs$core$IFn$_invoke$arity$2(G__16928,G__16929) : hoplon.core.i.call(null,G__16928,G__16929));
})();
return (hoplon.core.div.cljs$core$IFn$_invoke$arity$3 ? hoplon.core.div.cljs$core$IFn$_invoke$arity$3(G__16925,G__16926,G__16927) : hoplon.core.div.call(null,G__16925,G__16926,G__16927));
})()], 0)),amentum.elements.button.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.cst$kw$class,"animated fade",cljs.core.cst$kw$tabindex,(0),(function (){var G__16930 = cljs.core.cst$kw$class;
var G__16931 = "visible content";
var G__16932 = "Sign up for a Pro account";
return (hoplon.core.div.cljs$core$IFn$_invoke$arity$3 ? hoplon.core.div.cljs$core$IFn$_invoke$arity$3(G__16930,G__16931,G__16932) : hoplon.core.div.call(null,G__16930,G__16931,G__16932));
})(),(function (){var G__16933 = cljs.core.cst$kw$class;
var G__16934 = "hidden content";
var G__16935 = "$12.99 a month";
return (hoplon.core.div.cljs$core$IFn$_invoke$arity$3 ? hoplon.core.div.cljs$core$IFn$_invoke$arity$3(G__16933,G__16934,G__16935) : hoplon.core.div.call(null,G__16933,G__16934,G__16935));
})()], 0))], null)], 0)),amentum.docs.core.example.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.cst$kw$source,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$count,1,cljs.core.cst$kw$text,"<span style=\"font-weight:bold;color:red\">(</span><span style=\"font-weight:bold;color:blue\">e/button</span>\n<span style=\"font-weight:bold;color:yellow\"> :class</span>\n<span style=\"font-weight:bold;color:magenta\"> &quot;labeled&quot;</span>\n<span style=\"font-weight:bold;color:yellow\"> :tabindex</span>\n<span style=\"color:cyan\"> 0</span>\n<span style=\"font-weight:bold;color:red\"> (</span><span style=\"font-weight:bold;color:blue\">e/button</span> <span style=\"font-weight:bold;color:red\">(</span><span style=\"font-weight:bold;color:blue\">e/icon</span> <span style=\"font-weight:bold;color:magenta\">&quot;heart&quot;</span><span style=\"font-weight:bold;color:red\">)</span> <span style=\"font-weight:bold;color:magenta\">&quot;Like&quot;</span><span style=\"font-weight:bold;color:red\">)</span>\n<span style=\"font-weight:bold;color:red\"> (</span><span style=\"font-weight:bold;color:blue\">e/label</span> <span style=\"font-weight:bold;color:yellow\">:class</span> <span style=\"font-weight:bold;color:magenta\">&quot;basic&quot;</span> <span style=\"font-weight:bold;color:magenta\">&quot;2,048&quot;</span><span style=\"font-weight:bold;color:red\">)</span><span style=\"font-weight:bold;color:red\">)</span>"], null),cljs.core.cst$kw$title,"Labeled",(function (){var G__16936 = "A button can appear alongside a ";
var G__16937 = (function (){var G__16938 = cljs.core.cst$kw$href;
var G__16939 = "/elements/label";
var G__16940 = "Label";
return (hoplon.core.a.cljs$core$IFn$_invoke$arity$3 ? hoplon.core.a.cljs$core$IFn$_invoke$arity$3(G__16938,G__16939,G__16940) : hoplon.core.a.call(null,G__16938,G__16939,G__16940));
})();
return (hoplon.core.p.cljs$core$IFn$_invoke$arity$2 ? hoplon.core.p.cljs$core$IFn$_invoke$arity$2(G__16936,G__16937) : hoplon.core.p.call(null,G__16936,G__16937));
})(),amentum.elements.button.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.cst$kw$class,"labeled",cljs.core.cst$kw$tabindex,(0),amentum.elements.button.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([amentum.elements.icon.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq(["heart"], 0)),"Like"], 0)),amentum.elements.label.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.cst$kw$class,"basic","2,048"], 0))], 0))], 0)),amentum.docs.core.example.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.cst$kw$source,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$count,1,cljs.core.cst$kw$text,"<span style=\"font-weight:bold;color:red\">(</span><span style=\"font-weight:bold;color:blue\">e/button</span>\n<span style=\"font-weight:bold;color:yellow\"> :class</span>\n<span style=\"font-weight:bold;color:magenta\"> &quot;left labeled&quot;</span>\n<span style=\"font-weight:bold;color:yellow\"> :tabindex</span>\n<span style=\"color:cyan\"> 0</span>\n<span style=\"font-weight:bold;color:red\"> (</span><span style=\"font-weight:bold;color:blue\">e/label</span> <span style=\"font-weight:bold;color:yellow\">:class</span> <span style=\"font-weight:bold;color:magenta\">&quot;basic right pointing&quot;</span> <span style=\"font-weight:bold;color:magenta\">&quot;2,048&quot;</span><span style=\"font-weight:bold;color:red\">)</span>\n<span style=\"font-weight:bold;color:red\"> (</span><span style=\"font-weight:bold;color:blue\">e/button</span> <span style=\"font-weight:bold;color:red\">(</span><span style=\"font-weight:bold;color:blue\">e/icon</span> <span style=\"font-weight:bold;color:magenta\">&quot;heart&quot;</span><span style=\"font-weight:bold;color:red\">)</span> <span style=\"font-weight:bold;color:magenta\">&quot;Like&quot;</span><span style=\"font-weight:bold;color:red\">)</span><span style=\"font-weight:bold;color:red\">)</span>"], null),cljs.core.cst$kw$class,"another",amentum.elements.button.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.cst$kw$class,"left labeled",cljs.core.cst$kw$tabindex,(0),amentum.elements.label.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.cst$kw$class,"basic right pointing","2,048"], 0)),amentum.elements.button.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([amentum.elements.icon.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq(["heart"], 0)),"Like"], 0))], 0))], 0)),amentum.docs.core.example.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.cst$kw$source,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$count,1,cljs.core.cst$kw$text,"<span style=\"font-weight:bold;color:red\">(</span><span style=\"font-weight:bold;color:blue\">e/button</span>\n<span style=\"font-weight:bold;color:yellow\"> :class</span>\n<span style=\"font-weight:bold;color:magenta\"> &quot;left labeled&quot;</span>\n<span style=\"font-weight:bold;color:yellow\"> :tabindex</span>\n<span style=\"color:cyan\"> 0</span>\n<span style=\"font-weight:bold;color:red\"> (</span><span style=\"font-weight:bold;color:blue\">e/label</span> <span style=\"font-weight:bold;color:yellow\">:class</span> <span style=\"font-weight:bold;color:magenta\">&quot;basic&quot;</span> <span style=\"font-weight:bold;color:magenta\">&quot;1,048&quot;</span><span style=\"font-weight:bold;color:red\">)</span>\n<span style=\"font-weight:bold;color:red\"> (</span><span style=\"font-weight:bold;color:blue\">e/button</span> <span style=\"font-weight:bold;color:yellow\">:class</span> <span style=\"font-weight:bold;color:magenta\">&quot;icon&quot;</span> <span style=\"font-weight:bold;color:red\">(</span><span style=\"font-weight:bold;color:blue\">e/icon</span> <span style=\"font-weight:bold;color:magenta\">&quot;fork&quot;</span><span style=\"font-weight:bold;color:red\">)</span><span style=\"font-weight:bold;color:red\">)</span><span style=\"font-weight:bold;color:red\">)</span>"], null),cljs.core.cst$kw$class,"another",amentum.elements.button.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.cst$kw$class,"left labeled",cljs.core.cst$kw$tabindex,(0),amentum.elements.label.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.cst$kw$class,"basic","1,048"], 0)),amentum.elements.button.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.cst$kw$class,"icon",amentum.elements.icon.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq(["fork"], 0))], 0))], 0))], 0)),amentum.docs.core.example.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.cst$kw$source,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$count,1,cljs.core.cst$kw$text,"<span style=\"font-weight:bold;color:red\">(</span><span style=\"font-weight:bold;color:blue\">e/button</span>\n<span style=\"font-weight:bold;color:yellow\"> :class</span>\n<span style=\"font-weight:bold;color:magenta\"> &quot;labeled&quot;</span>\n<span style=\"font-weight:bold;color:yellow\"> :tabindex</span>\n<span style=\"color:cyan\"> 0</span>\n<span style=\"font-weight:bold;color:red\"> (</span><span style=\"font-weight:bold;color:blue\">e/button</span> <span style=\"font-weight:bold;color:yellow\">:class</span> <span style=\"font-weight:bold;color:magenta\">&quot;red&quot;</span> <span style=\"font-weight:bold;color:red\">(</span><span style=\"font-weight:bold;color:blue\">e/icon</span> <span style=\"font-weight:bold;color:magenta\">&quot;heart&quot;</span><span style=\"font-weight:bold;color:red\">)</span> <span style=\"font-weight:bold;color:magenta\">&quot;Like&quot;</span><span style=\"font-weight:bold;color:red\">)</span>\n<span style=\"font-weight:bold;color:red\"> (</span><span style=\"font-weight:bold;color:blue\">e/label</span> <span style=\"font-weight:bold;color:yellow\">:class</span> <span style=\"font-weight:bold;color:magenta\">&quot;basic&quot;</span> <span style=\"font-weight:bold;color:magenta\">&quot;2,048&quot;</span><span style=\"font-weight:bold;color:red\">)</span><span style=\"font-weight:bold;color:red\">)</span>"], null),cljs.core.cst$kw$class,"another",amentum.elements.button.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.cst$kw$class,"labeled",cljs.core.cst$kw$tabindex,(0),amentum.elements.button.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.cst$kw$class,"red",amentum.elements.icon.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq(["heart"], 0)),"Like"], 0)),amentum.elements.label.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.cst$kw$class,"basic","2,048"], 0))], 0))], 0)),amentum.docs.core.example.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.cst$kw$source,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$count,1,cljs.core.cst$kw$text,"<span style=\"font-weight:bold;color:red\">(</span><span style=\"font-weight:bold;color:blue\">e/button</span>\n<span style=\"font-weight:bold;color:yellow\"> :class</span>\n<span style=\"font-weight:bold;color:magenta\"> &quot;left labeled&quot;</span>\n<span style=\"font-weight:bold;color:yellow\"> :tabindex</span>\n<span style=\"color:cyan\"> 0</span>\n<span style=\"font-weight:bold;color:red\"> (</span><span style=\"font-weight:bold;color:blue\">e/button</span> <span style=\"font-weight:bold;color:yellow\">:class</span> <span style=\"font-weight:bold;color:magenta\">&quot;basic blue&quot;</span> <span style=\"font-weight:bold;color:red\">(</span><span style=\"font-weight:bold;color:blue\">e/icon</span> <span style=\"font-weight:bold;color:magenta\">&quot;fork&quot;</span><span style=\"font-weight:bold;color:red\">)</span> <span style=\"font-weight:bold;color:magenta\">&quot;Fork&quot;</span><span style=\"font-weight:bold;color:red\">)</span>\n<span style=\"font-weight:bold;color:red\"> (</span><span style=\"font-weight:bold;color:blue\">e/label</span> <span style=\"font-weight:bold;color:yellow\">:class</span> <span style=\"font-weight:bold;color:magenta\">&quot;basic left pointing blue&quot;</span> <span style=\"font-weight:bold;color:magenta\">&quot;1,048&quot;</span><span style=\"font-weight:bold;color:red\">)</span><span style=\"font-weight:bold;color:red\">)</span>"], null),cljs.core.cst$kw$class,"another",amentum.elements.button.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.cst$kw$class,"left labeled",cljs.core.cst$kw$tabindex,(0),amentum.elements.button.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.cst$kw$class,"basic blue",amentum.elements.icon.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq(["fork"], 0)),"Fork"], 0)),amentum.elements.label.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.cst$kw$class,"basic left pointing blue","1,048"], 0))], 0))], 0)),amentum.docs.core.example.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.cst$kw$source,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$count,1,cljs.core.cst$kw$text,"<span style=\"font-weight:bold;color:red\">(</span><span style=\"font-weight:bold;color:blue\">e/button</span> <span style=\"font-weight:bold;color:yellow\">:icon</span> <span style=\"font-weight:bold;color:magenta\">&quot;cloud&quot;</span><span style=\"font-weight:bold;color:red\">)</span>"], null),cljs.core.cst$kw$title,"Icon",(hoplon.core.p.cljs$core$IFn$_invoke$arity$1 ? hoplon.core.p.cljs$core$IFn$_invoke$arity$1("A button can have only an icon") : hoplon.core.p.call(null,"A button can have only an icon")),amentum.elements.button.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.cst$kw$icon,"cloud"], 0))], 0)),amentum.docs.core.example.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.cst$kw$source,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$count,2,cljs.core.cst$kw$text,"<span style=\"font-weight:bold;color:red\">(</span><span style=\"font-weight:bold;color:blue\">e/button</span> <span style=\"font-weight:bold;color:yellow\">:class</span> <span style=\"font-weight:bold;color:magenta\">&quot;labeled icon&quot;</span> <span style=\"font-weight:bold;color:yellow\">:icon</span> <span style=\"font-weight:bold;color:magenta\">&quot;pause&quot;</span> <span style=\"font-weight:bold;color:magenta\">&quot;Pause&quot;</span><span style=\"font-weight:bold;color:red\">)</span><span style=\"font-weight:bold;color:red\">(</span><span style=\"font-weight:bold;color:blue\">e/button</span> <span style=\"font-weight:bold;color:yellow\">:class</span> <span style=\"font-weight:bold;color:magenta\">&quot;right labeled icon&quot;</span> <span style=\"font-weight:bold;color:yellow\">:icon</span> <span style=\"font-weight:bold;color:magenta\">&quot;right arrow&quot;</span> <span style=\"font-weight:bold;color:magenta\">&quot;Next&quot;</span><span style=\"font-weight:bold;color:red\">)</span>"], null),cljs.core.cst$kw$title,"Labeled Icon",(hoplon.core.p.cljs$core$IFn$_invoke$arity$1 ? hoplon.core.p.cljs$core$IFn$_invoke$arity$1("A button can use an icon as a label") : hoplon.core.p.call(null,"A button can use an icon as a label")),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [amentum.elements.button.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.cst$kw$class,"labeled icon",cljs.core.cst$kw$icon,"pause","Pause"], 0)),amentum.elements.button.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.cst$kw$class,"right labeled icon",cljs.core.cst$kw$icon,"right arrow","Next"], 0))], null)], 0)),amentum.docs.core.example.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.cst$kw$source,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$count,1,cljs.core.cst$kw$text,"<span style=\"font-weight:bold;color:red\">(</span><span style=\"font-weight:bold;color:blue\">e/button</span> <span style=\"font-weight:bold;color:yellow\">:class</span> <span style=\"font-weight:bold;color:magenta\">&quot;basic&quot;</span> <span style=\"font-weight:bold;color:yellow\">:icon</span> <span style=\"font-weight:bold;color:magenta\">&quot;user&quot;</span> <span style=\"font-weight:bold;color:magenta\">&quot;Add Friend&quot;</span><span style=\"font-weight:bold;color:red\">)</span>"], null),cljs.core.cst$kw$title,"Basic",cljs.core.cst$kw$class,"another spaced",(hoplon.core.p.cljs$core$IFn$_invoke$arity$1 ? hoplon.core.p.cljs$core$IFn$_invoke$arity$1("A basic button is less pronounced") : hoplon.core.p.call(null,"A basic button is less pronounced")),amentum.elements.button.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.cst$kw$class,"basic",cljs.core.cst$kw$icon,"user","Add Friend"], 0))], 0)),amentum.docs.core.example.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.cst$kw$source,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$count,1,cljs.core.cst$kw$text,"<span style=\"font-weight:bold;color:red\">(</span><span style=\"font-weight:bold;color:blue\">let</span>\n<span style=\"font-weight:bold;color:red\"> [</span>c <span style=\"font-weight:bold;color:red\">[</span><span style=\"font-weight:bold;color:magenta\">&quot;primary&quot;</span> <span style=\"font-weight:bold;color:magenta\">&quot;secondary&quot;</span> <span style=\"font-weight:bold;color:magenta\">&quot;positive&quot;</span> <span style=\"font-weight:bold;color:magenta\">&quot;negative&quot;</span><span style=\"font-weight:bold;color:red\">]</span><span style=\"font-weight:bold;color:red\">]</span>\n<span style=\"font-weight:bold;color:red\"> (</span><span style=\"font-weight:bold;color:blue\">map</span>\n<span style=\"font-weight:bold;color:red\">  (</span><span style=\"font-weight:bold;color:blue\">fn*</span>\n<span style=\"font-weight:bold;color:red\">   [</span>p1__16811#<span style=\"font-weight:bold;color:red\">]</span>\n<span style=\"font-weight:bold;color:red\">   (</span><span style=\"font-weight:bold;color:blue\">e/button</span> <span style=\"font-weight:bold;color:yellow\">:class</span> <span style=\"font-weight:bold;color:red\">(</span><span style=\"font-weight:bold;color:blue\">str</span> p1__16811# <span style=\"font-weight:bold;color:magenta\">&quot; basic&quot;</span><span style=\"font-weight:bold;color:red\">)</span> <span style=\"font-weight:bold;color:red\">(</span><span style=\"font-weight:bold;color:blue\">s/capitalize</span> p1__16811#<span style=\"font-weight:bold;color:red\">)</span><span style=\"font-weight:bold;color:red\">)</span><span style=\"font-weight:bold;color:red\">)</span>\n  c<span style=\"font-weight:bold;color:red\">)</span><span style=\"font-weight:bold;color:red\">)</span>"], null),cljs.core.cst$kw$class,"another spaced",(function (){var c = new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, ["primary","secondary","positive","negative"], null);
return cljs.core.map.cljs$core$IFn$_invoke$arity$2(((function (c){
return (function (p1__16811_SHARP_){
return amentum.elements.button.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.cst$kw$class,[cljs.core.str(p1__16811_SHARP_),cljs.core.str(" basic")].join(''),clojure.string.capitalize(p1__16811_SHARP_)], 0));
});})(c))
,c);
})()], 0)),amentum.docs.core.example.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.cst$kw$source,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$count,1,cljs.core.cst$kw$text,"<span style=\"font-weight:bold;color:red\">(</span><span style=\"font-weight:bold;color:blue\">map</span>\n<span style=\"font-weight:bold;color:red\"> (</span><span style=\"font-weight:bold;color:blue\">fn*</span>\n<span style=\"font-weight:bold;color:red\">  [</span>p1__16812#<span style=\"font-weight:bold;color:red\">]</span>\n<span style=\"font-weight:bold;color:red\">  (</span><span style=\"font-weight:bold;color:blue\">e/button</span> <span style=\"font-weight:bold;color:yellow\">:color</span> p1__16812# <span style=\"font-weight:bold;color:yellow\">:class</span> <span style=\"font-weight:bold;color:magenta\">&quot;basic&quot;</span> <span style=\"font-weight:bold;color:red\">(</span><span style=\"font-weight:bold;color:blue\">s/capitalize</span> p1__16812#<span style=\"font-weight:bold;color:red\">)</span><span style=\"font-weight:bold;color:red\">)</span><span style=\"font-weight:bold;color:red\">)</span>\n colors<span style=\"font-weight:bold;color:red\">)</span>"], null),cljs.core.cst$kw$class,"another spaced",cljs.core.map.cljs$core$IFn$_invoke$arity$2((function (p1__16812_SHARP_){
return amentum.elements.button.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.cst$kw$color,p1__16812_SHARP_,cljs.core.cst$kw$class,"basic",clojure.string.capitalize(p1__16812_SHARP_)], 0));
}),amentum.docs.views.elements.colors)], 0)),amentum.docs.core.example.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.cst$kw$source,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$count,1,cljs.core.cst$kw$text,"<span style=\"font-weight:bold;color:red\">(</span><span style=\"font-weight:bold;color:blue\">e/segment</span>\n<span style=\"font-weight:bold;color:yellow\"> :class</span>\n<span style=\"font-weight:bold;color:magenta\"> &quot;inverted&quot;</span>\n<span style=\"font-weight:bold;color:red\"> (</span><span style=\"font-weight:bold;color:blue\">map</span>\n<span style=\"font-weight:bold;color:red\">  (</span><span style=\"font-weight:bold;color:blue\">fn*</span>\n<span style=\"font-weight:bold;color:red\">   [</span>p1__16813#<span style=\"font-weight:bold;color:red\">]</span>\n<span style=\"font-weight:bold;color:red\">   (</span><span style=\"font-weight:bold;color:blue\">e/button</span> <span style=\"font-weight:bold;color:yellow\">:color</span> p1__16813# <span style=\"font-weight:bold;color:yellow\">:class</span> <span style=\"font-weight:bold;color:magenta\">&quot;inverted&quot;</span> <span style=\"font-weight:bold;color:red\">(</span><span style=\"font-weight:bold;color:blue\">s/capitalize</span> p1__16813#<span style=\"font-weight:bold;color:red\">)</span><span style=\"font-weight:bold;color:red\">)</span><span style=\"font-weight:bold;color:red\">)</span>\n  colors<span style=\"font-weight:bold;color:red\">)</span><span style=\"font-weight:bold;color:red\">)</span>"], null),cljs.core.cst$kw$title,"Inverted",cljs.core.cst$kw$class,"spaced",(hoplon.core.p.cljs$core$IFn$_invoke$arity$1 ? hoplon.core.p.cljs$core$IFn$_invoke$arity$1("A button can be formatted to appear on dark backgrounds") : hoplon.core.p.call(null,"A button can be formatted to appear on dark backgrounds")),amentum.elements.segment.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.cst$kw$class,"inverted",cljs.core.map.cljs$core$IFn$_invoke$arity$2((function (p1__16813_SHARP_){
return amentum.elements.button.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.cst$kw$color,p1__16813_SHARP_,cljs.core.cst$kw$class,"inverted",clojure.string.capitalize(p1__16813_SHARP_)], 0));
}),amentum.docs.views.elements.colors)], 0))], 0)),amentum.docs.core.example.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.cst$kw$source,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$count,1,cljs.core.cst$kw$text,"<span style=\"font-weight:bold;color:red\">(</span><span style=\"font-weight:bold;color:blue\">e/segment</span>\n<span style=\"font-weight:bold;color:yellow\"> :class</span>\n<span style=\"font-weight:bold;color:magenta\"> &quot;inverted&quot;</span>\n<span style=\"font-weight:bold;color:red\"> (</span><span style=\"font-weight:bold;color:blue\">map</span>\n<span style=\"font-weight:bold;color:red\">  (</span><span style=\"font-weight:bold;color:blue\">fn*</span>\n<span style=\"font-weight:bold;color:red\">   [</span>p1__16814#<span style=\"font-weight:bold;color:red\">]</span>\n<span style=\"font-weight:bold;color:red\">   (</span><span style=\"font-weight:bold;color:blue\">e/button</span>\n<span style=\"font-weight:bold;color:yellow\">    :color</span>\n    p1__16814#\n<span style=\"font-weight:bold;color:yellow\">    :class</span>\n<span style=\"font-weight:bold;color:magenta\">    &quot;inverted basic&quot;</span>\n<span style=\"font-weight:bold;color:red\">    (</span><span style=\"font-weight:bold;color:blue\">str</span> <span style=\"font-weight:bold;color:magenta\">&quot;Basic &quot;</span> <span style=\"font-weight:bold;color:red\">(</span><span style=\"font-weight:bold;color:blue\">s/capitalize</span> p1__16814#<span style=\"font-weight:bold;color:red\">)</span><span style=\"font-weight:bold;color:red\">)</span><span style=\"font-weight:bold;color:red\">)</span><span style=\"font-weight:bold;color:red\">)</span>\n  colors<span style=\"font-weight:bold;color:red\">)</span><span style=\"font-weight:bold;color:red\">)</span>"], null),cljs.core.cst$kw$class,"another spaced",amentum.elements.segment.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.cst$kw$class,"inverted",cljs.core.map.cljs$core$IFn$_invoke$arity$2((function (p1__16814_SHARP_){
return amentum.elements.button.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.cst$kw$color,p1__16814_SHARP_,cljs.core.cst$kw$class,"inverted basic",[cljs.core.str("Basic "),cljs.core.str(clojure.string.capitalize(p1__16814_SHARP_))].join('')], 0));
}),amentum.docs.views.elements.colors)], 0))], 0))], 0)),amentum.docs.core.section.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.cst$kw$title,"Groups",amentum.docs.core.example.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.cst$kw$source,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$count,1,cljs.core.cst$kw$text,"<span style=\"font-weight:bold;color:red\">(</span><span style=\"font-weight:bold;color:blue\">e/buttons</span>\n<span style=\"font-weight:bold;color:red\"> (</span><span style=\"font-weight:bold;color:blue\">map</span>\n<span style=\"font-weight:bold;color:red\">  (</span><span style=\"font-weight:bold;color:blue\">fn*</span> <span style=\"font-weight:bold;color:red\">[</span>p1__16815#<span style=\"font-weight:bold;color:red\">]</span> <span style=\"font-weight:bold;color:red\">(</span><span style=\"font-weight:bold;color:blue\">e/button</span> <span style=\"font-weight:bold;color:red\">(</span><span style=\"font-weight:bold;color:blue\">s/capitalize</span> p1__16815#<span style=\"font-weight:bold;color:red\">)</span><span style=\"font-weight:bold;color:red\">)</span><span style=\"font-weight:bold;color:red\">)</span>\n<span style=\"font-weight:bold;color:red\">  [</span><span style=\"font-weight:bold;color:magenta\">&quot;one&quot;</span> <span style=\"font-weight:bold;color:magenta\">&quot;two&quot;</span> <span style=\"font-weight:bold;color:magenta\">&quot;three&quot;</span><span style=\"font-weight:bold;color:red\">]</span><span style=\"font-weight:bold;color:red\">)</span><span style=\"font-weight:bold;color:red\">)</span>"], null),cljs.core.cst$kw$title,"Buttons",(hoplon.core.p.cljs$core$IFn$_invoke$arity$1 ? hoplon.core.p.cljs$core$IFn$_invoke$arity$1("Buttons can exist together as a group") : hoplon.core.p.call(null,"Buttons can exist together as a group")),amentum.elements.buttons.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.map.cljs$core$IFn$_invoke$arity$2((function (p1__16815_SHARP_){
return amentum.elements.button.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([clojure.string.capitalize(p1__16815_SHARP_)], 0));
}),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["one","two","three"], null))], 0))], 0)),amentum.docs.core.example.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.cst$kw$source,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$count,2,cljs.core.cst$kw$text,"<span style=\"font-weight:bold;color:red\">(</span><span style=\"font-weight:bold;color:blue\">e/buttons</span>\n<span style=\"font-weight:bold;color:red\"> (</span><span style=\"font-weight:bold;color:blue\">map</span>\n<span style=\"font-weight:bold;color:red\">  (</span><span style=\"font-weight:bold;color:blue\">fn*</span> <span style=\"font-weight:bold;color:red\">[</span>p1__16816#<span style=\"font-weight:bold;color:red\">]</span> <span style=\"font-weight:bold;color:red\">(</span><span style=\"font-weight:bold;color:blue\">e/button</span> <span style=\"font-weight:bold;color:yellow\">:icon</span> <span style=\"font-weight:bold;color:red\">(</span><span style=\"font-weight:bold;color:blue\">str</span> <span style=\"font-weight:bold;color:magenta\">&quot;align &quot;</span> p1__16816#<span style=\"font-weight:bold;color:red\">)</span><span style=\"font-weight:bold;color:red\">)</span><span style=\"font-weight:bold;color:red\">)</span>\n<span style=\"font-weight:bold;color:red\">  [</span><span style=\"font-weight:bold;color:magenta\">&quot;left&quot;</span> <span style=\"font-weight:bold;color:magenta\">&quot;center&quot;</span> <span style=\"font-weight:bold;color:magenta\">&quot;right&quot;</span> <span style=\"font-weight:bold;color:magenta\">&quot;justify&quot;</span><span style=\"font-weight:bold;color:red\">]</span><span style=\"font-weight:bold;color:red\">)</span><span style=\"font-weight:bold;color:red\">)</span><span style=\"font-weight:bold;color:red\">(</span><span style=\"font-weight:bold;color:blue\">e/buttons</span>\n<span style=\"font-weight:bold;color:red\"> (</span><span style=\"font-weight:bold;color:blue\">map</span>\n<span style=\"font-weight:bold;color:red\">  (</span><span style=\"font-weight:bold;color:blue\">fn*</span> <span style=\"font-weight:bold;color:red\">[</span>p1__16817#<span style=\"font-weight:bold;color:red\">]</span> <span style=\"font-weight:bold;color:red\">(</span><span style=\"font-weight:bold;color:blue\">e/button</span> <span style=\"font-weight:bold;color:yellow\">:icon</span> <span style=\"font-weight:bold;color:red\">(</span><span style=\"font-weight:bold;color:blue\">str</span> <span style=\"font-weight:bold;color:magenta\">&quot;align &quot;</span> p1__16817#<span style=\"font-weight:bold;color:red\">)</span><span style=\"font-weight:bold;color:red\">)</span><span style=\"font-weight:bold;color:red\">)</span>\n<span style=\"font-weight:bold;color:red\">  [</span><span style=\"font-weight:bold;color:magenta\">&quot;bold&quot;</span> <span style=\"font-weight:bold;color:magenta\">&quot;underline&quot;</span> <span style=\"font-weight:bold;color:magenta\">&quot;text width&quot;</span><span style=\"font-weight:bold;color:red\">]</span><span style=\"font-weight:bold;color:red\">)</span><span style=\"font-weight:bold;color:red\">)</span>"], null),cljs.core.cst$kw$title,"Icon Buttons",(hoplon.core.p.cljs$core$IFn$_invoke$arity$1 ? hoplon.core.p.cljs$core$IFn$_invoke$arity$1("Button groups can show groups of icons") : hoplon.core.p.call(null,"Button groups can show groups of icons")),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [amentum.elements.buttons.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.map.cljs$core$IFn$_invoke$arity$2((function (p1__16816_SHARP_){
return amentum.elements.button.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.cst$kw$icon,[cljs.core.str("align "),cljs.core.str(p1__16816_SHARP_)].join('')], 0));
}),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, ["left","center","right","justify"], null))], 0)),amentum.elements.buttons.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.map.cljs$core$IFn$_invoke$arity$2((function (p1__16817_SHARP_){
return amentum.elements.button.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.cst$kw$icon,[cljs.core.str("align "),cljs.core.str(p1__16817_SHARP_)].join('')], 0));
}),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["bold","underline","text width"], null))], 0))], null)], 0))], 0)),amentum.docs.core.section.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.cst$kw$title,"Content",amentum.docs.core.example.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.cst$kw$source,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$count,1,cljs.core.cst$kw$text,"<span style=\"font-weight:bold;color:red\">(</span><span style=\"font-weight:bold;color:blue\">e/buttons</span>\n<span style=\"font-weight:bold;color:red\"> (</span><span style=\"font-weight:bold;color:blue\">e/button</span> <span style=\"font-weight:bold;color:magenta\">&quot;Cancel&quot;</span><span style=\"font-weight:bold;color:red\">)</span>\n<span style=\"font-weight:bold;color:red\"> (</span><span style=\"font-weight:bold;color:blue\">h/div</span> <span style=\"font-weight:bold;color:yellow\">:class</span> <span style=\"font-weight:bold;color:magenta\">&quot;or&quot;</span><span style=\"font-weight:bold;color:red\">)</span>\n<span style=\"font-weight:bold;color:red\"> (</span><span style=\"font-weight:bold;color:blue\">e/button</span> <span style=\"font-weight:bold;color:yellow\">:class</span> <span style=\"font-weight:bold;color:magenta\">&quot;positive&quot;</span> <span style=\"font-weight:bold;color:magenta\">&quot;Save&quot;</span><span style=\"font-weight:bold;color:red\">)</span><span style=\"font-weight:bold;color:red\">)</span>"], null),cljs.core.cst$kw$title,"Conditionals",(hoplon.core.p.cljs$core$IFn$_invoke$arity$1 ? hoplon.core.p.cljs$core$IFn$_invoke$arity$1("Button groups can contain conditionals") : hoplon.core.p.call(null,"Button groups can contain conditionals")),amentum.elements.buttons.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([amentum.elements.button.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq(["Cancel"], 0)),(function (){var G__16941 = cljs.core.cst$kw$class;
var G__16942 = "or";
return (hoplon.core.div.cljs$core$IFn$_invoke$arity$2 ? hoplon.core.div.cljs$core$IFn$_invoke$arity$2(G__16941,G__16942) : hoplon.core.div.call(null,G__16941,G__16942));
})(),amentum.elements.button.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.cst$kw$class,"positive","Save"], 0))], 0))], 0))], 0)),amentum.docs.core.section.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.cst$kw$title,"States",amentum.docs.core.example.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.cst$kw$source,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$count,1,cljs.core.cst$kw$text,"<span style=\"font-weight:bold;color:red\">(</span><span style=\"font-weight:bold;color:blue\">e/button</span> <span style=\"font-weight:bold;color:yellow\">:class</span> <span style=\"font-weight:bold;color:magenta\">&quot;active&quot;</span> <span style=\"font-weight:bold;color:yellow\">:icon</span> <span style=\"font-weight:bold;color:magenta\">&quot;user&quot;</span> <span style=\"font-weight:bold;color:magenta\">&quot;Follow&quot;</span><span style=\"font-weight:bold;color:red\">)</span>"], null),cljs.core.cst$kw$title,"Active",(hoplon.core.p.cljs$core$IFn$_invoke$arity$1 ? hoplon.core.p.cljs$core$IFn$_invoke$arity$1("A button can show it is currently the active user selection") : hoplon.core.p.call(null,"A button can show it is currently the active user selection")),amentum.elements.button.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.cst$kw$class,"active",cljs.core.cst$kw$icon,"user","Follow"], 0))], 0)),amentum.docs.core.example.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.cst$kw$source,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$count,1,cljs.core.cst$kw$text,"<span style=\"font-weight:bold;color:red\">(</span><span style=\"font-weight:bold;color:blue\">e/button</span> <span style=\"font-weight:bold;color:yellow\">:class</span> <span style=\"font-weight:bold;color:magenta\">&quot;disabled&quot;</span> <span style=\"font-weight:bold;color:yellow\">:icon</span> <span style=\"font-weight:bold;color:magenta\">&quot;user&quot;</span> <span style=\"font-weight:bold;color:magenta\">&quot;Followed&quot;</span><span style=\"font-weight:bold;color:red\">)</span>"], null),cljs.core.cst$kw$title,"Disabled",(hoplon.core.p.cljs$core$IFn$_invoke$arity$1 ? hoplon.core.p.cljs$core$IFn$_invoke$arity$1("A button can show it is currently unable to be interacted with") : hoplon.core.p.call(null,"A button can show it is currently unable to be interacted with")),amentum.elements.button.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.cst$kw$class,"disabled",cljs.core.cst$kw$icon,"user","Followed"], 0))], 0)),amentum.docs.core.example.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.cst$kw$source,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$count,1,cljs.core.cst$kw$text,"<span style=\"font-weight:bold;color:red\">(</span><span style=\"font-weight:bold;color:blue\">map</span>\n<span style=\"font-weight:bold;color:red\"> (</span><span style=\"font-weight:bold;color:blue\">fn*</span>\n<span style=\"font-weight:bold;color:red\">  [</span>p1__16818#<span style=\"font-weight:bold;color:red\">]</span>\n<span style=\"font-weight:bold;color:red\">  (</span><span style=\"font-weight:bold;color:blue\">e/button</span> <span style=\"font-weight:bold;color:yellow\">:class</span> <span style=\"font-weight:bold;color:red\">(</span><span style=\"font-weight:bold;color:blue\">str</span> <span style=\"font-weight:bold;color:magenta\">&quot;ui &quot;</span> p1__16818# <span style=\"font-weight:bold;color:magenta\">&quot; loading&quot;</span><span style=\"font-weight:bold;color:red\">)</span> <span style=\"font-weight:bold;color:magenta\">&quot;Loading&quot;</span><span style=\"font-weight:bold;color:red\">)</span><span style=\"font-weight:bold;color:red\">)</span>\n<span style=\"font-weight:bold;color:red\"> [</span><span style=\"font-weight:bold;color:magenta\">&quot;&quot;</span> <span style=\"font-weight:bold;color:magenta\">&quot;basic&quot;</span> <span style=\"font-weight:bold;color:magenta\">&quot;primary&quot;</span> <span style=\"font-weight:bold;color:magenta\">&quot;sceonday&quot;</span><span style=\"font-weight:bold;color:red\">]</span><span style=\"font-weight:bold;color:red\">)</span>"], null),cljs.core.cst$kw$title,"Loading",(hoplon.core.p.cljs$core$IFn$_invoke$arity$1 ? hoplon.core.p.cljs$core$IFn$_invoke$arity$1("A button can show a loading indicator") : hoplon.core.p.call(null,"A button can show a loading indicator")),cljs.core.map.cljs$core$IFn$_invoke$arity$2((function (p1__16818_SHARP_){
return amentum.elements.button.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.cst$kw$class,[cljs.core.str("ui "),cljs.core.str(p1__16818_SHARP_),cljs.core.str(" loading")].join(''),"Loading"], 0));
}),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, ["","basic","primary","sceonday"], null))], 0))], 0)),amentum.docs.core.section.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.cst$kw$title,"Variations",amentum.docs.core.example.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.cst$kw$source,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$count,1,cljs.core.cst$kw$text,"<span style=\"font-weight:bold;color:red\">(</span><span style=\"font-weight:bold;color:blue\">map</span> <span style=\"font-weight:bold;color:red\">(</span><span style=\"font-weight:bold;color:blue\">fn</span> <span style=\"font-weight:bold;color:red\">[</span><span style=\"font-weight:bold;color:red\">[</span>n l<span style=\"font-weight:bold;color:red\">]</span><span style=\"font-weight:bold;color:red\">]</span> <span style=\"font-weight:bold;color:red\">(</span><span style=\"font-weight:bold;color:blue\">e/button</span> <span style=\"font-weight:bold;color:yellow\">:class</span> n <span style=\"font-weight:bold;color:yellow\">:icon</span> n l<span style=\"font-weight:bold;color:red\">)</span><span style=\"font-weight:bold;color:red\">)</span> networks<span style=\"font-weight:bold;color:red\">)</span>"], null),cljs.core.cst$kw$title,"Social",cljs.core.cst$kw$class,"spaced",(hoplon.core.p.cljs$core$IFn$_invoke$arity$1 ? hoplon.core.p.cljs$core$IFn$_invoke$arity$1("A button can be formatted to link to a social website") : hoplon.core.p.call(null,"A button can be formatted to link to a social website")),cljs.core.map.cljs$core$IFn$_invoke$arity$2((function (p__16943){
var vec__16944 = p__16943;
var n = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__16944,(0),null);
var l = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__16944,(1),null);
return amentum.elements.button.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.cst$kw$class,n,cljs.core.cst$kw$icon,n,l], 0));
}),amentum.docs.views.elements.networks)], 0)),amentum.docs.core.example.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.cst$kw$source,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$count,1,cljs.core.cst$kw$text,"<span style=\"font-weight:bold;color:red\">(</span><span style=\"font-weight:bold;color:blue\">let</span>\n<span style=\"font-weight:bold;color:red\"> [</span>sizes <span style=\"font-weight:bold;color:red\">[</span><span style=\"font-weight:bold;color:magenta\">&quot;mini&quot;</span> <span style=\"font-weight:bold;color:magenta\">&quot;tiny&quot;</span> <span style=\"font-weight:bold;color:magenta\">&quot;small&quot;</span> <span style=\"font-weight:bold;color:magenta\">&quot;medium&quot;</span> <span style=\"font-weight:bold;color:magenta\">&quot;large&quot;</span> <span style=\"font-weight:bold;color:magenta\">&quot;big&quot;</span> <span style=\"font-weight:bold;color:magenta\">&quot;huge&quot;</span> <span style=\"font-weight:bold;color:magenta\">&quot;massive&quot;</span><span style=\"font-weight:bold;color:red\">]</span><span style=\"font-weight:bold;color:red\">]</span>\n<span style=\"font-weight:bold;color:red\"> (</span><span style=\"font-weight:bold;color:blue\">map</span>\n<span style=\"font-weight:bold;color:red\">  (</span><span style=\"font-weight:bold;color:blue\">fn*</span> <span style=\"font-weight:bold;color:red\">[</span>p1__16819#<span style=\"font-weight:bold;color:red\">]</span> <span style=\"font-weight:bold;color:red\">(</span><span style=\"font-weight:bold;color:blue\">e/button</span> <span style=\"font-weight:bold;color:yellow\">:class</span> p1__16819# <span style=\"font-weight:bold;color:red\">(</span><span style=\"font-weight:bold;color:blue\">s/capitalize</span> p1__16819#<span style=\"font-weight:bold;color:red\">)</span><span style=\"font-weight:bold;color:red\">)</span><span style=\"font-weight:bold;color:red\">)</span>\n  sizes<span style=\"font-weight:bold;color:red\">)</span><span style=\"font-weight:bold;color:red\">)</span>"], null),cljs.core.cst$kw$title,"Size",cljs.core.cst$kw$class,"spaced",(hoplon.core.p.cljs$core$IFn$_invoke$arity$1 ? hoplon.core.p.cljs$core$IFn$_invoke$arity$1("A button can have different sizes") : hoplon.core.p.call(null,"A button can have different sizes")),(function (){var sizes = new cljs.core.PersistentVector(null, 8, 5, cljs.core.PersistentVector.EMPTY_NODE, ["mini","tiny","small","medium","large","big","huge","massive"], null);
return cljs.core.map.cljs$core$IFn$_invoke$arity$2(((function (sizes){
return (function (p1__16819_SHARP_){
return amentum.elements.button.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.cst$kw$class,p1__16819_SHARP_,clojure.string.capitalize(p1__16819_SHARP_)], 0));
});})(sizes))
,sizes);
})()], 0)),amentum.docs.core.example.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.cst$kw$source,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$count,2,cljs.core.cst$kw$text,"<span style=\"font-weight:bold;color:red\">(</span><span style=\"font-weight:bold;color:blue\">e/button</span> <span style=\"font-weight:bold;color:yellow\">:class</span> <span style=\"font-weight:bold;color:magenta\">&quot;right floated&quot;</span> <span style=\"font-weight:bold;color:magenta\">&quot;Right Floated&quot;</span><span style=\"font-weight:bold;color:red\">)</span><span style=\"font-weight:bold;color:red\">(</span><span style=\"font-weight:bold;color:blue\">e/button</span> <span style=\"font-weight:bold;color:yellow\">:class</span> <span style=\"font-weight:bold;color:magenta\">&quot;left floated&quot;</span> <span style=\"font-weight:bold;color:magenta\">&quot;Left Floated&quot;</span><span style=\"font-weight:bold;color:red\">)</span>"], null),cljs.core.cst$kw$title,"Floated",(hoplon.core.p.cljs$core$IFn$_invoke$arity$1 ? hoplon.core.p.cljs$core$IFn$_invoke$arity$1("A button can be aligned to the left or right of its container") : hoplon.core.p.call(null,"A button can be aligned to the left or right of its container")),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [amentum.elements.button.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.cst$kw$class,"right floated","Right Floated"], 0)),amentum.elements.button.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.cst$kw$class,"left floated","Left Floated"], 0))], null)], 0)),amentum.docs.core.example.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.cst$kw$source,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$count,1,cljs.core.cst$kw$text,"<span style=\"font-weight:bold;color:red\">(</span><span style=\"font-weight:bold;color:blue\">map</span>\n<span style=\"font-weight:bold;color:red\"> (</span><span style=\"font-weight:bold;color:blue\">fn*</span> <span style=\"font-weight:bold;color:red\">[</span>p1__16820#<span style=\"font-weight:bold;color:red\">]</span> <span style=\"font-weight:bold;color:red\">(</span><span style=\"font-weight:bold;color:blue\">e/button</span> <span style=\"font-weight:bold;color:yellow\">:class</span> p1__16820# <span style=\"font-weight:bold;color:red\">(</span><span style=\"font-weight:bold;color:blue\">s/capitalize</span> p1__16820#<span style=\"font-weight:bold;color:red\">)</span><span style=\"font-weight:bold;color:red\">)</span><span style=\"font-weight:bold;color:red\">)</span>\n colors<span style=\"font-weight:bold;color:red\">)</span>"], null),cljs.core.cst$kw$title,"Colored",cljs.core.cst$kw$class,"spaced",(hoplon.core.p.cljs$core$IFn$_invoke$arity$1 ? hoplon.core.p.cljs$core$IFn$_invoke$arity$1("A button can have different colors") : hoplon.core.p.call(null,"A button can have different colors")),cljs.core.map.cljs$core$IFn$_invoke$arity$2((function (p1__16820_SHARP_){
return amentum.elements.button.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.cst$kw$class,p1__16820_SHARP_,clojure.string.capitalize(p1__16820_SHARP_)], 0));
}),amentum.docs.views.elements.colors)], 0)),amentum.docs.core.example.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.cst$kw$source,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$count,3,cljs.core.cst$kw$text,"<span style=\"font-weight:bold;color:red\">(</span><span style=\"font-weight:bold;color:blue\">e/button</span> <span style=\"font-weight:bold;color:yellow\">:class</span> <span style=\"font-weight:bold;color:magenta\">&quot;compact&quot;</span> <span style=\"font-weight:bold;color:magenta\">&quot;Hold&quot;</span><span style=\"font-weight:bold;color:red\">)</span><span style=\"font-weight:bold;color:red\">(</span><span style=\"font-weight:bold;color:blue\">e/button</span> <span style=\"font-weight:bold;color:yellow\">:class</span> <span style=\"font-weight:bold;color:magenta\">&quot;compact&quot;</span> <span style=\"font-weight:bold;color:yellow\">:icon</span> <span style=\"font-weight:bold;color:magenta\">&quot;pause&quot;</span><span style=\"font-weight:bold;color:red\">)</span><span style=\"font-weight:bold;color:red\">(</span><span style=\"font-weight:bold;color:blue\">e/button</span> <span style=\"font-weight:bold;color:yellow\">:class</span> <span style=\"font-weight:bold;color:magenta\">&quot;compact icon labeled&quot;</span> <span style=\"font-weight:bold;color:yellow\">:icon</span> <span style=\"font-weight:bold;color:magenta\">&quot;pause&quot;</span> <span style=\"font-weight:bold;color:magenta\">&quot;Pause&quot;</span><span style=\"font-weight:bold;color:red\">)</span>"], null),cljs.core.cst$kw$title,"Compact",(hoplon.core.p.cljs$core$IFn$_invoke$arity$1 ? hoplon.core.p.cljs$core$IFn$_invoke$arity$1("A button can reduce its padding to fit into tighter spaces") : hoplon.core.p.call(null,"A button can reduce its padding to fit into tighter spaces")),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [amentum.elements.button.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.cst$kw$class,"compact","Hold"], 0)),amentum.elements.button.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.cst$kw$class,"compact",cljs.core.cst$kw$icon,"pause"], 0)),amentum.elements.button.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.cst$kw$class,"compact icon labeled",cljs.core.cst$kw$icon,"pause","Pause"], 0))], null)], 0)),amentum.docs.core.example.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.cst$kw$source,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$count,1,cljs.core.cst$kw$text,"<span style=\"font-weight:bold;color:red\">(</span><span style=\"font-weight:bold;color:blue\">let</span>\n<span style=\"font-weight:bold;color:red\"> [</span>c <span style=\"font-weight:bold;color:red\">(</span><span style=\"font-weight:bold;color:blue\">j/cell</span> <span style=\"color:green\">false</span><span style=\"font-weight:bold;color:red\">)</span><span style=\"font-weight:bold;color:red\">]</span>\n<span style=\"font-weight:bold;color:red\"> (</span><span style=\"font-weight:bold;color:blue\">e/button</span>\n<span style=\"font-weight:bold;color:yellow\">  :class</span>\n<span style=\"font-weight:bold;color:red\">  (</span><span style=\"font-weight:bold;color:blue\">j/cell=</span> <span style=\"font-weight:bold;color:red\">{</span><span style=\"font-weight:bold;color:yellow\">:active</span> c, <span style=\"font-weight:bold;color:yellow\">:toggle</span> <span style=\"color:green\">true</span><span style=\"font-weight:bold;color:red\">}</span><span style=\"font-weight:bold;color:red\">)</span>\n<span style=\"font-weight:bold;color:yellow\">  :click</span>\n<span style=\"font-weight:bold;color:red\">  (</span><span style=\"font-weight:bold;color:blue\">fn*</span> <span style=\"font-weight:bold;color:red\">[</span><span style=\"font-weight:bold;color:red\">]</span> <span style=\"font-weight:bold;color:red\">(</span><span style=\"font-weight:bold;color:blue\">swap!</span> c not<span style=\"font-weight:bold;color:red\">)</span><span style=\"font-weight:bold;color:red\">)</span>\n<span style=\"font-weight:bold;color:red\">  (</span><span style=\"font-weight:bold;color:blue\">j/cell=</span> <span style=\"font-weight:bold;color:red\">(</span><span style=\"font-weight:bold;color:blue\">if</span> c <span style=\"font-weight:bold;color:magenta\">&quot;Voted&quot;</span> <span style=\"font-weight:bold;color:magenta\">&quot;Vote&quot;</span><span style=\"font-weight:bold;color:red\">)</span><span style=\"font-weight:bold;color:red\">)</span><span style=\"font-weight:bold;color:red\">)</span><span style=\"font-weight:bold;color:red\">)</span>"], null),cljs.core.cst$kw$title,"Toggle",(hoplon.core.p.cljs$core$IFn$_invoke$arity$1 ? hoplon.core.p.cljs$core$IFn$_invoke$arity$1("A button can be formatted to toggle on and off") : hoplon.core.p.call(null,"A button can be formatted to toggle on and off")),(function (){var c = javelin.core.cell.cljs$core$IFn$_invoke$arity$1(false);
return amentum.elements.button.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.cst$kw$class,javelin.core.formula(((function (c){
return (function (G__16947){
return new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$toggle,true,cljs.core.cst$kw$active,G__16947], null);
});})(c))
).call(null,c),cljs.core.cst$kw$click,((function (c){
return (function (){
return cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(c,cljs.core.not);
});})(c))
,javelin.core.formula(((function (c){
return (function (G__16948){
if(cljs.core.truth_(G__16948)){
return "Voted";
} else {
return "Vote";
}
});})(c))
).call(null,c)], 0));
})()], 0)),amentum.docs.core.example.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.cst$kw$source,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$count,1,cljs.core.cst$kw$text,"<span style=\"font-weight:bold;color:red\">(</span><span style=\"font-weight:bold;color:blue\">e/button</span> <span style=\"font-weight:bold;color:yellow\">:class</span> <span style=\"font-weight:bold;color:magenta\">&quot;positive&quot;</span> <span style=\"font-weight:bold;color:magenta\">&quot;Positive Button&quot;</span><span style=\"font-weight:bold;color:red\">)</span>"], null),cljs.core.cst$kw$title,"Positive",(hoplon.core.p.cljs$core$IFn$_invoke$arity$1 ? hoplon.core.p.cljs$core$IFn$_invoke$arity$1("A button can hint towards a positive consequence") : hoplon.core.p.call(null,"A button can hint towards a positive consequence")),amentum.elements.button.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.cst$kw$class,"positive","Positive Button"], 0))], 0)),amentum.docs.core.example.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.cst$kw$source,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$count,1,cljs.core.cst$kw$text,"<span style=\"font-weight:bold;color:red\">(</span><span style=\"font-weight:bold;color:blue\">e/button</span> <span style=\"font-weight:bold;color:yellow\">:class</span> <span style=\"font-weight:bold;color:magenta\">&quot;negative&quot;</span> <span style=\"font-weight:bold;color:magenta\">&quot;Positive Button&quot;</span><span style=\"font-weight:bold;color:red\">)</span>"], null),cljs.core.cst$kw$title,"Negative",(hoplon.core.p.cljs$core$IFn$_invoke$arity$1 ? hoplon.core.p.cljs$core$IFn$_invoke$arity$1("A button can hint towards a negative consequence") : hoplon.core.p.call(null,"A button can hint towards a negative consequence")),amentum.elements.button.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.cst$kw$class,"negative","Positive Button"], 0))], 0)),amentum.docs.core.example.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.cst$kw$source,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$count,1,cljs.core.cst$kw$text,"<span style=\"font-weight:bold;color:red\">(</span><span style=\"font-weight:bold;color:blue\">e/button</span> <span style=\"font-weight:bold;color:yellow\">:class</span> <span style=\"font-weight:bold;color:magenta\">&quot;fluid&quot;</span> <span style=\"font-weight:bold;color:magenta\">&quot;Fits container&quot;</span><span style=\"font-weight:bold;color:red\">)</span>"], null),cljs.core.cst$kw$title,"Fluid",(hoplon.core.p.cljs$core$IFn$_invoke$arity$1 ? hoplon.core.p.cljs$core$IFn$_invoke$arity$1("A button can take the width of its container") : hoplon.core.p.call(null,"A button can take the width of its container")),amentum.elements.button.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.cst$kw$class,"fluid","Fits container"], 0))], 0)),amentum.docs.core.example.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.cst$kw$source,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$count,1,cljs.core.cst$kw$text,"<span style=\"font-weight:bold;color:red\">(</span><span style=\"font-weight:bold;color:blue\">e/button</span> <span style=\"font-weight:bold;color:yellow\">:class</span> <span style=\"font-weight:bold;color:magenta\">&quot;circular&quot;</span> <span style=\"font-weight:bold;color:yellow\">:icon</span> <span style=\"font-weight:bold;color:magenta\">&quot;settings&quot;</span><span style=\"font-weight:bold;color:red\">)</span>"], null),cljs.core.cst$kw$title,"Circular",(hoplon.core.p.cljs$core$IFn$_invoke$arity$1 ? hoplon.core.p.cljs$core$IFn$_invoke$arity$1("A button can be circular") : hoplon.core.p.call(null,"A button can be circular")),amentum.elements.button.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.cst$kw$class,"circular",cljs.core.cst$kw$icon,"settings"], 0))], 0)),amentum.docs.core.example.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.cst$kw$source,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$count,1,cljs.core.cst$kw$text,"<span style=\"font-weight:bold;color:red\">(</span><span style=\"font-weight:bold;color:blue\">map</span>\n<span style=\"font-weight:bold;color:red\"> (</span><span style=\"font-weight:bold;color:blue\">fn</span> <span style=\"font-weight:bold;color:red\">[</span><span style=\"font-weight:bold;color:red\">[</span>n l<span style=\"font-weight:bold;color:red\">]</span><span style=\"font-weight:bold;color:red\">]</span> <span style=\"font-weight:bold;color:red\">(</span><span style=\"font-weight:bold;color:blue\">e/button</span> <span style=\"font-weight:bold;color:yellow\">:class</span> <span style=\"font-weight:bold;color:red\">(</span><span style=\"font-weight:bold;color:blue\">str</span> <span style=\"font-weight:bold;color:magenta\">&quot;circular &quot;</span> n<span style=\"font-weight:bold;color:red\">)</span> <span style=\"font-weight:bold;color:yellow\">:icon</span> n<span style=\"font-weight:bold;color:red\">)</span><span style=\"font-weight:bold;color:red\">)</span>\n<span style=\"font-weight:bold;color:red\"> (</span><span style=\"font-weight:bold;color:blue\">take</span> <span style=\"color:cyan\">4</span> networks<span style=\"font-weight:bold;color:red\">)</span><span style=\"font-weight:bold;color:red\">)</span>"], null),cljs.core.cst$kw$class,"another spaced",(hoplon.core.p.cljs$core$IFn$_invoke$arity$1 ? hoplon.core.p.cljs$core$IFn$_invoke$arity$1("A button can be formatted to link to a social website") : hoplon.core.p.call(null,"A button can be formatted to link to a social website")),cljs.core.map.cljs$core$IFn$_invoke$arity$2((function (p__16949){
var vec__16950 = p__16949;
var n = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__16950,(0),null);
var l = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__16950,(1),null);
return amentum.elements.button.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.cst$kw$class,[cljs.core.str("circular "),cljs.core.str(n)].join(''),cljs.core.cst$kw$icon,n], 0));
}),cljs.core.take.cljs$core$IFn$_invoke$arity$2((4),amentum.docs.views.elements.networks))], 0)),amentum.docs.core.example.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.cst$kw$source,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$count,3,cljs.core.cst$kw$text,"<span style=\"font-weight:bold;color:red\">(</span><span style=\"font-weight:bold;color:blue\">e/button</span> <span style=\"font-weight:bold;color:yellow\">:class</span> <span style=\"font-weight:bold;color:magenta\">&quot;top attached&quot;</span> <span style=\"font-weight:bold;color:yellow\">:tabindex</span> <span style=\"color:cyan\">0</span> <span style=\"font-weight:bold;color:magenta\">&quot;Top&quot;</span><span style=\"font-weight:bold;color:red\">)</span><span style=\"font-weight:bold;color:red\">(</span><span style=\"font-weight:bold;color:blue\">e/segment</span> <span style=\"font-weight:bold;color:yellow\">:class</span> <span style=\"font-weight:bold;color:magenta\">&quot;attached&quot;</span> <span style=\"font-weight:bold;color:red\">(</span><span style=\"font-weight:bold;color:blue\">h/p</span> lorem<span style=\"font-weight:bold;color:red\">)</span><span style=\"font-weight:bold;color:red\">)</span><span style=\"font-weight:bold;color:red\">(</span><span style=\"font-weight:bold;color:blue\">e/button</span> <span style=\"font-weight:bold;color:yellow\">:class</span> <span style=\"font-weight:bold;color:magenta\">&quot;bottom attached&quot;</span> <span style=\"font-weight:bold;color:yellow\">:tabindex</span> <span style=\"color:cyan\">0</span> <span style=\"font-weight:bold;color:magenta\">&quot;Bottom&quot;</span><span style=\"font-weight:bold;color:red\">)</span>"], null),cljs.core.cst$kw$title,"Vertically Attached",(hoplon.core.p.cljs$core$IFn$_invoke$arity$1 ? hoplon.core.p.cljs$core$IFn$_invoke$arity$1("A button can be attached to the top or bottom of other content") : hoplon.core.p.call(null,"A button can be attached to the top or bottom of other content")),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [amentum.elements.button.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.cst$kw$class,"top attached",cljs.core.cst$kw$tabindex,(0),"Top"], 0)),amentum.elements.segment.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.cst$kw$class,"attached",(hoplon.core.p.cljs$core$IFn$_invoke$arity$1 ? hoplon.core.p.cljs$core$IFn$_invoke$arity$1(amentum.docs.views.elements.lorem) : hoplon.core.p.call(null,amentum.docs.views.elements.lorem))], 0)),amentum.elements.button.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.cst$kw$class,"bottom attached",cljs.core.cst$kw$tabindex,(0),"Bottom"], 0))], null)], 0)),amentum.docs.core.example.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.cst$kw$source,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$count,3,cljs.core.cst$kw$text,"<span style=\"font-weight:bold;color:red\">(</span><span style=\"font-weight:bold;color:blue\">e/buttons</span> <span style=\"font-weight:bold;color:yellow\">:class</span> <span style=\"font-weight:bold;color:magenta\">&quot;two top attached&quot;</span> <span style=\"font-weight:bold;color:red\">(</span><span style=\"font-weight:bold;color:blue\">e/button</span> <span style=\"font-weight:bold;color:magenta\">&quot;One&quot;</span><span style=\"font-weight:bold;color:red\">)</span> <span style=\"font-weight:bold;color:red\">(</span><span style=\"font-weight:bold;color:blue\">e/button</span> <span style=\"font-weight:bold;color:magenta\">&quot;Two&quot;</span><span style=\"font-weight:bold;color:red\">)</span><span style=\"font-weight:bold;color:red\">)</span><span style=\"font-weight:bold;color:red\">(</span><span style=\"font-weight:bold;color:blue\">e/segment</span> <span style=\"font-weight:bold;color:yellow\">:class</span> <span style=\"font-weight:bold;color:magenta\">&quot;attached&quot;</span> <span style=\"font-weight:bold;color:red\">(</span><span style=\"font-weight:bold;color:blue\">h/p</span> lorem<span style=\"font-weight:bold;color:red\">)</span><span style=\"font-weight:bold;color:red\">)</span><span style=\"font-weight:bold;color:red\">(</span><span style=\"font-weight:bold;color:blue\">e/buttons</span> <span style=\"font-weight:bold;color:yellow\">:class</span> <span style=\"font-weight:bold;color:magenta\">&quot;two bottom attached&quot;</span> <span style=\"font-weight:bold;color:red\">(</span><span style=\"font-weight:bold;color:blue\">e/button</span> <span style=\"font-weight:bold;color:magenta\">&quot;One&quot;</span><span style=\"font-weight:bold;color:red\">)</span> <span style=\"font-weight:bold;color:red\">(</span><span style=\"font-weight:bold;color:blue\">e/button</span> <span style=\"font-weight:bold;color:magenta\">&quot;Two&quot;</span><span style=\"font-weight:bold;color:red\">)</span><span style=\"font-weight:bold;color:red\">)</span>"], null),cljs.core.cst$kw$class,"another",new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [amentum.elements.buttons.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.cst$kw$class,"two top attached",amentum.elements.button.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq(["One"], 0)),amentum.elements.button.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq(["Two"], 0))], 0)),amentum.elements.segment.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.cst$kw$class,"attached",(hoplon.core.p.cljs$core$IFn$_invoke$arity$1 ? hoplon.core.p.cljs$core$IFn$_invoke$arity$1(amentum.docs.views.elements.lorem) : hoplon.core.p.call(null,amentum.docs.views.elements.lorem))], 0)),amentum.elements.buttons.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.cst$kw$class,"two bottom attached",amentum.elements.button.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq(["One"], 0)),amentum.elements.button.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq(["Two"], 0))], 0))], null)], 0)),amentum.docs.core.example.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.cst$kw$source,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$count,2,cljs.core.cst$kw$text,"<span style=\"font-weight:bold;color:red\">(</span><span style=\"font-weight:bold;color:blue\">e/button</span> <span style=\"font-weight:bold;color:yellow\">:class</span> <span style=\"font-weight:bold;color:magenta\">&quot;left attached&quot;</span> <span style=\"font-weight:bold;color:magenta\">&quot;Left&quot;</span><span style=\"font-weight:bold;color:red\">)</span><span style=\"font-weight:bold;color:red\">(</span><span style=\"font-weight:bold;color:blue\">e/button</span> <span style=\"font-weight:bold;color:yellow\">:class</span> <span style=\"font-weight:bold;color:magenta\">&quot;right attached&quot;</span> <span style=\"font-weight:bold;color:magenta\">&quot;Right&quot;</span><span style=\"font-weight:bold;color:red\">)</span>"], null),cljs.core.cst$kw$title,"Horizontally Attached",(hoplon.core.p.cljs$core$IFn$_invoke$arity$1 ? hoplon.core.p.cljs$core$IFn$_invoke$arity$1("A button can be attached to the left or right of other content") : hoplon.core.p.call(null,"A button can be attached to the left or right of other content")),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [amentum.elements.button.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.cst$kw$class,"left attached","Left"], 0)),amentum.elements.button.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.cst$kw$class,"right attached","Right"], 0))], null)], 0))], 0)),amentum.docs.core.section.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.cst$kw$title,"Group Variations",amentum.docs.core.example.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.cst$kw$source,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$count,1,cljs.core.cst$kw$text,"<span style=\"font-weight:bold;color:red\">(</span><span style=\"font-weight:bold;color:blue\">e/buttons</span>\n<span style=\"font-weight:bold;color:yellow\"> :class</span>\n<span style=\"font-weight:bold;color:magenta\"> &quot;vertical&quot;</span>\n<span style=\"font-weight:bold;color:red\"> (</span><span style=\"font-weight:bold;color:blue\">map</span>\n<span style=\"font-weight:bold;color:red\">  (</span><span style=\"font-weight:bold;color:blue\">fn*</span> <span style=\"font-weight:bold;color:red\">[</span>p1__16821#<span style=\"font-weight:bold;color:red\">]</span> <span style=\"font-weight:bold;color:red\">(</span><span style=\"font-weight:bold;color:blue\">e/button</span> p1__16821#<span style=\"font-weight:bold;color:red\">)</span><span style=\"font-weight:bold;color:red\">)</span>\n<span style=\"font-weight:bold;color:red\">  [</span><span style=\"font-weight:bold;color:magenta\">&quot;Feed&quot;</span> <span style=\"font-weight:bold;color:magenta\">&quot;Messages&quot;</span> <span style=\"font-weight:bold;color:magenta\">&quot;Events&quot;</span> <span style=\"font-weight:bold;color:magenta\">&quot;Photos&quot;</span><span style=\"font-weight:bold;color:red\">]</span><span style=\"font-weight:bold;color:red\">)</span><span style=\"font-weight:bold;color:red\">)</span>"], null),cljs.core.cst$kw$title,"Vertical Buttons",(hoplon.core.p.cljs$core$IFn$_invoke$arity$1 ? hoplon.core.p.cljs$core$IFn$_invoke$arity$1("Groups can be formatted to appear vertically") : hoplon.core.p.call(null,"Groups can be formatted to appear vertically")),amentum.elements.buttons.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.cst$kw$class,"vertical",cljs.core.map.cljs$core$IFn$_invoke$arity$2((function (p1__16821_SHARP_){
return amentum.elements.button.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([p1__16821_SHARP_], 0));
}),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Feed","Messages","Events","Photos"], null))], 0))], 0)),amentum.docs.core.example.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.cst$kw$source,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$count,1,cljs.core.cst$kw$text,"<span style=\"font-weight:bold;color:red\">(</span><span style=\"font-weight:bold;color:blue\">e/buttons</span>\n<span style=\"font-weight:bold;color:yellow\"> :class</span>\n<span style=\"font-weight:bold;color:magenta\"> &quot;icon&quot;</span>\n<span style=\"font-weight:bold;color:red\"> (</span><span style=\"font-weight:bold;color:blue\">map</span> <span style=\"font-weight:bold;color:red\">(</span><span style=\"font-weight:bold;color:blue\">fn*</span> <span style=\"font-weight:bold;color:red\">[</span>p1__16822#<span style=\"font-weight:bold;color:red\">]</span> <span style=\"font-weight:bold;color:red\">(</span><span style=\"font-weight:bold;color:blue\">e/button</span> <span style=\"font-weight:bold;color:yellow\">:icon</span> p1__16822#<span style=\"font-weight:bold;color:red\">)</span><span style=\"font-weight:bold;color:red\">)</span> <span style=\"font-weight:bold;color:red\">[</span><span style=\"font-weight:bold;color:magenta\">&quot;play&quot;</span> <span style=\"font-weight:bold;color:magenta\">&quot;pause&quot;</span> <span style=\"font-weight:bold;color:magenta\">&quot;shuffle&quot;</span><span style=\"font-weight:bold;color:red\">]</span><span style=\"font-weight:bold;color:red\">)</span><span style=\"font-weight:bold;color:red\">)</span>"], null),cljs.core.cst$kw$title,"Icon Buttons",(hoplon.core.p.cljs$core$IFn$_invoke$arity$1 ? hoplon.core.p.cljs$core$IFn$_invoke$arity$1("Groups can be formatted as icons") : hoplon.core.p.call(null,"Groups can be formatted as icons")),amentum.elements.buttons.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.cst$kw$class,"icon",cljs.core.map.cljs$core$IFn$_invoke$arity$2((function (p1__16822_SHARP_){
return amentum.elements.button.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.cst$kw$icon,p1__16822_SHARP_], 0));
}),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["play","pause","shuffle"], null))], 0))], 0)),amentum.docs.core.example.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.cst$kw$source,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$count,1,cljs.core.cst$kw$text,"<span style=\"font-weight:bold;color:red\">(</span><span style=\"font-weight:bold;color:blue\">e/buttons</span>\n<span style=\"font-weight:bold;color:yellow\"> :class</span>\n<span style=\"font-weight:bold;color:magenta\"> &quot;vertical labeled icon&quot;</span>\n<span style=\"font-weight:bold;color:red\"> (</span><span style=\"font-weight:bold;color:blue\">map</span>\n<span style=\"font-weight:bold;color:red\">  (</span><span style=\"font-weight:bold;color:blue\">fn*</span> <span style=\"font-weight:bold;color:red\">[</span>p1__16823#<span style=\"font-weight:bold;color:red\">]</span> <span style=\"font-weight:bold;color:red\">(</span><span style=\"font-weight:bold;color:blue\">e/button</span> <span style=\"font-weight:bold;color:yellow\">:icon</span> p1__16823# <span style=\"font-weight:bold;color:red\">(</span><span style=\"font-weight:bold;color:blue\">s/capitalize</span> p1__16823#<span style=\"font-weight:bold;color:red\">)</span><span style=\"font-weight:bold;color:red\">)</span><span style=\"font-weight:bold;color:red\">)</span>\n<span style=\"font-weight:bold;color:red\">  [</span><span style=\"font-weight:bold;color:magenta\">&quot;play&quot;</span> <span style=\"font-weight:bold;color:magenta\">&quot;pause&quot;</span> <span style=\"font-weight:bold;color:magenta\">&quot;shuffle&quot;</span><span style=\"font-weight:bold;color:red\">]</span><span style=\"font-weight:bold;color:red\">)</span><span style=\"font-weight:bold;color:red\">)</span>"], null),cljs.core.cst$kw$title,"Labeled Icon Buttons",(hoplon.core.p.cljs$core$IFn$_invoke$arity$1 ? hoplon.core.p.cljs$core$IFn$_invoke$arity$1("Groups can be formatted as labeled icons") : hoplon.core.p.call(null,"Groups can be formatted as labeled icons")),amentum.elements.buttons.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.cst$kw$class,"vertical labeled icon",cljs.core.map.cljs$core$IFn$_invoke$arity$2((function (p1__16823_SHARP_){
return amentum.elements.button.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.cst$kw$icon,p1__16823_SHARP_,clojure.string.capitalize(p1__16823_SHARP_)], 0));
}),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["play","pause","shuffle"], null))], 0))], 0)),amentum.docs.core.example.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.cst$kw$source,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$count,1,cljs.core.cst$kw$text,"<span style=\"font-weight:bold;color:red\">(</span><span style=\"font-weight:bold;color:blue\">e/buttons</span>\n<span style=\"font-weight:bold;color:red\"> (</span><span style=\"font-weight:bold;color:blue\">e/button</span> <span style=\"font-weight:bold;color:yellow\">:class</span> <span style=\"font-weight:bold;color:magenta\">&quot;labeled icon&quot;</span> <span style=\"font-weight:bold;color:yellow\">:icon</span> <span style=\"font-weight:bold;color:magenta\">&quot;left chevron&quot;</span> <span style=\"font-weight:bold;color:magenta\">&quot;Back&quot;</span><span style=\"font-weight:bold;color:red\">)</span>\n<span style=\"font-weight:bold;color:red\"> (</span><span style=\"font-weight:bold;color:blue\">e/button</span> <span style=\"font-weight:bold;color:yellow\">:icon</span> <span style=\"font-weight:bold;color:magenta\">&quot;stop&quot;</span> <span style=\"font-weight:bold;color:magenta\">&quot;Stop&quot;</span><span style=\"font-weight:bold;color:red\">)</span>\n<span style=\"font-weight:bold;color:red\"> (</span><span style=\"font-weight:bold;color:blue\">e/button</span> <span style=\"font-weight:bold;color:yellow\">:class</span> <span style=\"font-weight:bold;color:magenta\">&quot;right labeled icon&quot;</span> <span style=\"font-weight:bold;color:yellow\">:icon</span> <span style=\"font-weight:bold;color:magenta\">&quot;right chevron&quot;</span> <span style=\"font-weight:bold;color:magenta\">&quot;Back&quot;</span><span style=\"font-weight:bold;color:red\">)</span><span style=\"font-weight:bold;color:red\">)</span>"], null),cljs.core.cst$kw$title,"Mixed Group",(hoplon.core.p.cljs$core$IFn$_invoke$arity$1 ? hoplon.core.p.cljs$core$IFn$_invoke$arity$1("Groups can be formatted to use multiple button types together") : hoplon.core.p.call(null,"Groups can be formatted to use multiple button types together")),amentum.elements.buttons.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([amentum.elements.button.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.cst$kw$class,"labeled icon",cljs.core.cst$kw$icon,"left chevron","Back"], 0)),amentum.elements.button.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.cst$kw$icon,"stop","Stop"], 0)),amentum.elements.button.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.cst$kw$class,"right labeled icon",cljs.core.cst$kw$icon,"right chevron","Back"], 0))], 0))], 0)),amentum.docs.core.example.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.cst$kw$source,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$count,1,cljs.core.cst$kw$text,"<span style=\"font-weight:bold;color:red\">(</span><span style=\"font-weight:bold;color:blue\">let</span>\n<span style=\"font-weight:bold;color:red\"> [</span>s <span style=\"font-weight:bold;color:red\">[</span><span style=\"font-weight:bold;color:magenta\">&quot;Overview&quot;</span> <span style=\"font-weight:bold;color:magenta\">&quot;Specs&quot;</span> <span style=\"font-weight:bold;color:magenta\">&quot;Warranty&quot;</span> <span style=\"font-weight:bold;color:magenta\">&quot;Reviews&quot;</span> <span style=\"font-weight:bold;color:magenta\">&quot;Support&quot;</span><span style=\"font-weight:bold;color:red\">]</span><span style=\"font-weight:bold;color:red\">]</span>\n<span style=\"font-weight:bold;color:red\"> [</span><span style=\"font-weight:bold;color:red\">(</span><span style=\"font-weight:bold;color:blue\">e/buttons</span>\n<span style=\"font-weight:bold;color:yellow\">   :class</span>\n<span style=\"font-weight:bold;color:magenta\">   &quot;five&quot;</span>\n<span style=\"font-weight:bold;color:red\">   (</span><span style=\"font-weight:bold;color:blue\">map</span> <span style=\"font-weight:bold;color:red\">(</span><span style=\"font-weight:bold;color:blue\">fn*</span> <span style=\"font-weight:bold;color:red\">[</span>p1__16824#<span style=\"font-weight:bold;color:red\">]</span> <span style=\"font-weight:bold;color:red\">(</span><span style=\"font-weight:bold;color:blue\">e/button</span> p1__16824#<span style=\"font-weight:bold;color:red\">)</span><span style=\"font-weight:bold;color:red\">)</span> <span style=\"font-weight:bold;color:red\">(</span><span style=\"font-weight:bold;color:blue\">take</span> <span style=\"color:cyan\">5</span> s<span style=\"font-weight:bold;color:red\">)</span><span style=\"font-weight:bold;color:red\">)</span><span style=\"font-weight:bold;color:red\">)</span>\n<span style=\"font-weight:bold;color:red\">  (</span><span style=\"font-weight:bold;color:blue\">e/buttons</span>\n<span style=\"font-weight:bold;color:yellow\">   :class</span>\n<span style=\"font-weight:bold;color:magenta\">   &quot;three&quot;</span>\n<span style=\"font-weight:bold;color:red\">   (</span><span style=\"font-weight:bold;color:blue\">map</span> <span style=\"font-weight:bold;color:red\">(</span><span style=\"font-weight:bold;color:blue\">fn*</span> <span style=\"font-weight:bold;color:red\">[</span>p1__16825#<span style=\"font-weight:bold;color:red\">]</span> <span style=\"font-weight:bold;color:red\">(</span><span style=\"font-weight:bold;color:blue\">e/button</span> p1__16825#<span style=\"font-weight:bold;color:red\">)</span><span style=\"font-weight:bold;color:red\">)</span> <span style=\"font-weight:bold;color:red\">(</span><span style=\"font-weight:bold;color:blue\">take</span> <span style=\"color:cyan\">3</span> s<span style=\"font-weight:bold;color:red\">)</span><span style=\"font-weight:bold;color:red\">)</span><span style=\"font-weight:bold;color:red\">)</span><span style=\"font-weight:bold;color:red\">]</span><span style=\"font-weight:bold;color:red\">)</span>"], null),cljs.core.cst$kw$title,"Equal Width",(hoplon.core.p.cljs$core$IFn$_invoke$arity$1 ? hoplon.core.p.cljs$core$IFn$_invoke$arity$1("Groups can have their widths divided evenly") : hoplon.core.p.call(null,"Groups can have their widths divided evenly")),(function (){var s = new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Overview","Specs","Warranty","Reviews","Support"], null);
return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [amentum.elements.buttons.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.cst$kw$class,"five",cljs.core.map.cljs$core$IFn$_invoke$arity$2(((function (s){
return (function (p1__16824_SHARP_){
return amentum.elements.button.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([p1__16824_SHARP_], 0));
});})(s))
,cljs.core.take.cljs$core$IFn$_invoke$arity$2((5),s))], 0)),amentum.elements.buttons.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.cst$kw$class,"three",cljs.core.map.cljs$core$IFn$_invoke$arity$2(((function (s){
return (function (p1__16825_SHARP_){
return amentum.elements.button.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([p1__16825_SHARP_], 0));
});})(s))
,cljs.core.take.cljs$core$IFn$_invoke$arity$2((3),s))], 0))], null);
})()], 0)),amentum.docs.core.example.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.cst$kw$source,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$count,1,cljs.core.cst$kw$text,"<span style=\"font-weight:bold;color:red\">(</span><span style=\"font-weight:bold;color:blue\">e/buttons</span>\n<span style=\"font-weight:bold;color:yellow\"> :class</span>\n<span style=\"font-weight:bold;color:magenta\"> &quot;blue&quot;</span>\n<span style=\"font-weight:bold;color:red\"> (</span><span style=\"font-weight:bold;color:blue\">map</span> <span style=\"font-weight:bold;color:red\">(</span><span style=\"font-weight:bold;color:blue\">fn*</span> <span style=\"font-weight:bold;color:red\">[</span>p1__16826#<span style=\"font-weight:bold;color:red\">]</span> <span style=\"font-weight:bold;color:red\">(</span><span style=\"font-weight:bold;color:blue\">e/button</span> p1__16826#<span style=\"font-weight:bold;color:red\">)</span><span style=\"font-weight:bold;color:red\">)</span> <span style=\"font-weight:bold;color:red\">[</span><span style=\"font-weight:bold;color:magenta\">&quot;One&quot;</span> <span style=\"font-weight:bold;color:magenta\">&quot;Two&quot;</span> <span style=\"font-weight:bold;color:magenta\">&quot;Three&quot;</span><span style=\"font-weight:bold;color:red\">]</span><span style=\"font-weight:bold;color:red\">)</span><span style=\"font-weight:bold;color:red\">)</span>"], null),cljs.core.cst$kw$title,"Colored Buttons",(hoplon.core.p.cljs$core$IFn$_invoke$arity$1 ? hoplon.core.p.cljs$core$IFn$_invoke$arity$1("Groups can have a shared color") : hoplon.core.p.call(null,"Groups can have a shared color")),amentum.elements.buttons.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.cst$kw$class,"blue",cljs.core.map.cljs$core$IFn$_invoke$arity$2((function (p1__16826_SHARP_){
return amentum.elements.button.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([p1__16826_SHARP_], 0));
}),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["One","Two","Three"], null))], 0))], 0)),amentum.docs.core.example.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.cst$kw$source,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$count,1,cljs.core.cst$kw$text,"<span style=\"font-weight:bold;color:red\">(</span><span style=\"font-weight:bold;color:blue\">let</span>\n<span style=\"font-weight:bold;color:red\"> [</span>n <span style=\"font-weight:bold;color:red\">[</span><span style=\"font-weight:bold;color:magenta\">&quot;One&quot;</span> <span style=\"font-weight:bold;color:magenta\">&quot;Two&quot;</span> <span style=\"font-weight:bold;color:magenta\">&quot;Three&quot;</span><span style=\"font-weight:bold;color:red\">]</span><span style=\"font-weight:bold;color:red\">]</span>\n<span style=\"font-weight:bold;color:red\"> [</span><span style=\"font-weight:bold;color:red\">(</span><span style=\"font-weight:bold;color:blue\">e/buttons</span> <span style=\"font-weight:bold;color:yellow\">:class</span> <span style=\"font-weight:bold;color:magenta\">&quot;basic&quot;</span> <span style=\"font-weight:bold;color:red\">(</span><span style=\"font-weight:bold;color:blue\">map</span> <span style=\"font-weight:bold;color:red\">(</span><span style=\"font-weight:bold;color:blue\">fn*</span> <span style=\"font-weight:bold;color:red\">[</span>p1__16827#<span style=\"font-weight:bold;color:red\">]</span> <span style=\"font-weight:bold;color:red\">(</span><span style=\"font-weight:bold;color:blue\">e/button</span> p1__16827#<span style=\"font-weight:bold;color:red\">)</span><span style=\"font-weight:bold;color:red\">)</span> n<span style=\"font-weight:bold;color:red\">)</span><span style=\"font-weight:bold;color:red\">)</span>\n<span style=\"font-weight:bold;color:red\">  (</span><span style=\"font-weight:bold;color:blue\">h/div</span> <span style=\"font-weight:bold;color:yellow\">:class</span> <span style=\"font-weight:bold;color:magenta\">&quot;class ui divider&quot;</span><span style=\"font-weight:bold;color:red\">)</span>\n<span style=\"font-weight:bold;color:red\">  (</span><span style=\"font-weight:bold;color:blue\">e/buttons</span>\n<span style=\"font-weight:bold;color:yellow\">   :class</span>\n<span style=\"font-weight:bold;color:magenta\">   &quot;vertical basic&quot;</span>\n<span style=\"font-weight:bold;color:red\">   (</span><span style=\"font-weight:bold;color:blue\">map</span> <span style=\"font-weight:bold;color:red\">(</span><span style=\"font-weight:bold;color:blue\">fn*</span> <span style=\"font-weight:bold;color:red\">[</span>p1__16828#<span style=\"font-weight:bold;color:red\">]</span> <span style=\"font-weight:bold;color:red\">(</span><span style=\"font-weight:bold;color:blue\">e/button</span> p1__16828#<span style=\"font-weight:bold;color:red\">)</span><span style=\"font-weight:bold;color:red\">)</span> n<span style=\"font-weight:bold;color:red\">)</span><span style=\"font-weight:bold;color:red\">)</span><span style=\"font-weight:bold;color:red\">]</span><span style=\"font-weight:bold;color:red\">)</span>"], null),cljs.core.cst$kw$title,"Basic Buttons",(hoplon.core.p.cljs$core$IFn$_invoke$arity$1 ? hoplon.core.p.cljs$core$IFn$_invoke$arity$1("A button group can be less pronounced") : hoplon.core.p.call(null,"A button group can be less pronounced")),(function (){var n = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["One","Two","Three"], null);
return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [amentum.elements.buttons.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.cst$kw$class,"basic",cljs.core.map.cljs$core$IFn$_invoke$arity$2(((function (n){
return (function (p1__16827_SHARP_){
return amentum.elements.button.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([p1__16827_SHARP_], 0));
});})(n))
,n)], 0)),(function (){var G__16953 = cljs.core.cst$kw$class;
var G__16954 = "class ui divider";
return (hoplon.core.div.cljs$core$IFn$_invoke$arity$2 ? hoplon.core.div.cljs$core$IFn$_invoke$arity$2(G__16953,G__16954) : hoplon.core.div.call(null,G__16953,G__16954));
})(),amentum.elements.buttons.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.cst$kw$class,"vertical basic",cljs.core.map.cljs$core$IFn$_invoke$arity$2(((function (n){
return (function (p1__16828_SHARP_){
return amentum.elements.button.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([p1__16828_SHARP_], 0));
});})(n))
,n)], 0))], null);
})()], 0)),amentum.docs.core.example.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.cst$kw$source,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$count,1,cljs.core.cst$kw$text,"<span style=\"font-weight:bold;color:red\">(</span><span style=\"font-weight:bold;color:blue\">let</span>\n<span style=\"font-weight:bold;color:red\"> [</span>n <span style=\"font-weight:bold;color:red\">[</span><span style=\"font-weight:bold;color:red\">[</span><span style=\"font-weight:bold;color:magenta\">&quot;red&quot;</span> <span style=\"font-weight:bold;color:magenta\">&quot;One&quot;</span><span style=\"font-weight:bold;color:red\">]</span> <span style=\"font-weight:bold;color:red\">[</span><span style=\"font-weight:bold;color:magenta\">&quot;blue&quot;</span> <span style=\"font-weight:bold;color:magenta\">&quot;Two&quot;</span><span style=\"font-weight:bold;color:red\">]</span> <span style=\"font-weight:bold;color:red\">[</span><span style=\"font-weight:bold;color:magenta\">&quot;green&quot;</span> <span style=\"font-weight:bold;color:magenta\">&quot;Three&quot;</span><span style=\"font-weight:bold;color:red\">]</span><span style=\"font-weight:bold;color:red\">]</span><span style=\"font-weight:bold;color:red\">]</span>\n<span style=\"font-weight:bold;color:red\"> (</span><span style=\"font-weight:bold;color:blue\">e/buttons</span> <span style=\"font-weight:bold;color:red\">(</span><span style=\"font-weight:bold;color:blue\">map</span> <span style=\"font-weight:bold;color:red\">(</span><span style=\"font-weight:bold;color:blue\">fn</span> <span style=\"font-weight:bold;color:red\">[</span><span style=\"font-weight:bold;color:red\">[</span>c l<span style=\"font-weight:bold;color:red\">]</span><span style=\"font-weight:bold;color:red\">]</span> <span style=\"font-weight:bold;color:red\">(</span><span style=\"font-weight:bold;color:blue\">e/button</span> <span style=\"font-weight:bold;color:yellow\">:class</span> <span style=\"font-weight:bold;color:magenta\">&quot;basic&quot;</span> <span style=\"font-weight:bold;color:yellow\">:color</span> c l<span style=\"font-weight:bold;color:red\">)</span><span style=\"font-weight:bold;color:red\">)</span> n<span style=\"font-weight:bold;color:red\">)</span><span style=\"font-weight:bold;color:red\">)</span><span style=\"font-weight:bold;color:red\">)</span>"], null),cljs.core.cst$kw$class,"another",(function (){var n = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, ["red","One"], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, ["blue","Two"], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, ["green","Three"], null)], null);
return amentum.elements.buttons.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.map.cljs$core$IFn$_invoke$arity$2(((function (n){
return (function (p__16955){
var vec__16956 = p__16955;
var c = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__16956,(0),null);
var l = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__16956,(1),null);
return amentum.elements.button.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.cst$kw$class,"basic",cljs.core.cst$kw$color,c,l], 0));
});})(n))
,n)], 0));
})()], 0)),amentum.docs.core.example.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.cst$kw$source,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$count,1,cljs.core.cst$kw$text,"<span style=\"font-weight:bold;color:red\">(</span><span style=\"font-weight:bold;color:blue\">e/buttons</span>\n<span style=\"font-weight:bold;color:yellow\"> :class</span>\n<span style=\"font-weight:bold;color:magenta\"> &quot;large&quot;</span>\n<span style=\"font-weight:bold;color:red\"> (</span><span style=\"font-weight:bold;color:blue\">map</span> <span style=\"font-weight:bold;color:red\">(</span><span style=\"font-weight:bold;color:blue\">fn*</span> <span style=\"font-weight:bold;color:red\">[</span>p1__16829#<span style=\"font-weight:bold;color:red\">]</span> <span style=\"font-weight:bold;color:red\">(</span><span style=\"font-weight:bold;color:blue\">e/button</span> p1__16829#<span style=\"font-weight:bold;color:red\">)</span><span style=\"font-weight:bold;color:red\">)</span> <span style=\"font-weight:bold;color:red\">[</span><span style=\"font-weight:bold;color:magenta\">&quot;One&quot;</span> <span style=\"font-weight:bold;color:magenta\">&quot;Two&quot;</span> <span style=\"font-weight:bold;color:magenta\">&quot;Three&quot;</span><span style=\"font-weight:bold;color:red\">]</span><span style=\"font-weight:bold;color:red\">)</span><span style=\"font-weight:bold;color:red\">)</span>"], null),cljs.core.cst$kw$title,"Group Sizes",(hoplon.core.p.cljs$core$IFn$_invoke$arity$1 ? hoplon.core.p.cljs$core$IFn$_invoke$arity$1("Groups can have a shared size") : hoplon.core.p.call(null,"Groups can have a shared size")),amentum.elements.buttons.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.cst$kw$class,"large",cljs.core.map.cljs$core$IFn$_invoke$arity$2((function (p1__16829_SHARP_){
return amentum.elements.button.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([p1__16829_SHARP_], 0));
}),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["One","Two","Three"], null))], 0))], 0)),amentum.docs.core.example.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.cst$kw$source,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$count,1,cljs.core.cst$kw$text,"<span style=\"font-weight:bold;color:red\">(</span><span style=\"font-weight:bold;color:blue\">e/buttons</span>\n<span style=\"font-weight:bold;color:yellow\"> :class</span>\n<span style=\"font-weight:bold;color:magenta\"> &quot;small basic&quot;</span>\n<span style=\"font-weight:bold;color:red\"> (</span><span style=\"font-weight:bold;color:blue\">map</span>\n<span style=\"font-weight:bold;color:red\">  (</span><span style=\"font-weight:bold;color:blue\">fn*</span> <span style=\"font-weight:bold;color:red\">[</span>p1__16830#<span style=\"font-weight:bold;color:red\">]</span> <span style=\"font-weight:bold;color:red\">(</span><span style=\"font-weight:bold;color:blue\">e/button</span> <span style=\"font-weight:bold;color:yellow\">:icon</span> p1__16830#<span style=\"font-weight:bold;color:red\">)</span><span style=\"font-weight:bold;color:red\">)</span>\n<span style=\"font-weight:bold;color:red\">  [</span><span style=\"font-weight:bold;color:magenta\">&quot;file&quot;</span> <span style=\"font-weight:bold;color:magenta\">&quot;save&quot;</span> <span style=\"font-weight:bold;color:magenta\">&quot;upload&quot;</span> <span style=\"font-weight:bold;color:magenta\">&quot;download&quot;</span><span style=\"font-weight:bold;color:red\">]</span><span style=\"font-weight:bold;color:red\">)</span><span style=\"font-weight:bold;color:red\">)</span>"], null),cljs.core.cst$kw$class,"another",amentum.elements.buttons.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.cst$kw$class,"small basic",cljs.core.map.cljs$core$IFn$_invoke$arity$2((function (p1__16830_SHARP_){
return amentum.elements.button.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.cst$kw$icon,p1__16830_SHARP_], 0));
}),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, ["file","save","upload","download"], null))], 0))], 0)),amentum.docs.core.example.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.cst$kw$source,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$count,1,cljs.core.cst$kw$text,"<span style=\"font-weight:bold;color:red\">(</span><span style=\"font-weight:bold;color:blue\">e/buttons</span> <span style=\"font-weight:bold;color:yellow\">:class</span> <span style=\"font-weight:bold;color:magenta\">&quot;large&quot;</span> <span style=\"font-weight:bold;color:red\">(</span><span style=\"font-weight:bold;color:blue\">e/button</span> <span style=\"font-weight:bold;color:magenta\">&quot;One&quot;</span><span style=\"font-weight:bold;color:red\">)</span> <span style=\"font-weight:bold;color:red\">(</span><span style=\"font-weight:bold;color:blue\">h/div</span> <span style=\"font-weight:bold;color:yellow\">:class</span> <span style=\"font-weight:bold;color:magenta\">&quot;or&quot;</span><span style=\"font-weight:bold;color:red\">)</span> <span style=\"font-weight:bold;color:red\">(</span><span style=\"font-weight:bold;color:blue\">e/button</span> <span style=\"font-weight:bold;color:magenta\">&quot;Two&quot;</span><span style=\"font-weight:bold;color:red\">)</span><span style=\"font-weight:bold;color:red\">)</span>"], null),cljs.core.cst$kw$class,"another",amentum.elements.buttons.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.cst$kw$class,"large",amentum.elements.button.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq(["One"], 0)),(function (){var G__16959 = cljs.core.cst$kw$class;
var G__16960 = "or";
return (hoplon.core.div.cljs$core$IFn$_invoke$arity$2 ? hoplon.core.div.cljs$core$IFn$_invoke$arity$2(G__16959,G__16960) : hoplon.core.div.call(null,G__16959,G__16960));
})(),amentum.elements.button.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq(["Two"], 0))], 0))], 0))], 0))], null)], null);
});
amentum.docs.views.elements.container = (function amentum$docs$views$elements$container(){
return new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$header,"Container",cljs.core.cst$kw$sub_DASH_header,"A container limits content to a maximum width",cljs.core.cst$kw$content,null], null);
});
amentum.docs.views.elements.web_content_icons = cljs.core.PersistentVector.fromArray(["add to calendar","alarm outline","alarm mute outline","alarm mute","alarm","at","browser","bug","calendar outline","calendar","checked calendar","cloud","code","comment outline","comment","comments outline","comments","copyright","creative commons","dashboard","delete calendar","external square","external","eyedropper","feed","find","hand pointer","hashtag","heartbeat","history","home","hourglass empty","hourglass end","hourglass full","hourglass half","hourglass start","idea","image","inbox","industry","lab","mail outline","mail square","mail","mouse pointer","options","paint brush","payment","percent","privacy","protect","registered","remove from calendar","search","setting","settings","shop","shopping bag","shopping basket","signal","sitemap","tag","tags","tasks","terminal","text telephone","ticket","trademark","trophy","wifi"], true);
amentum.docs.views.elements.icon = (function amentum$docs$views$elements$icon(){
return new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$header,"Icon",cljs.core.cst$kw$sub_DASH_header,"An icon is a glyph used to represent something else",cljs.core.cst$kw$content,amentum.docs.core.section.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.cst$kw$title,"Icon Set",(hoplon.core.p.cljs$core$IFn$_invoke$arity$1 ? hoplon.core.p.cljs$core$IFn$_invoke$arity$1("An icon set contains an arbitrary number of glyphs") : hoplon.core.p.call(null,"An icon set contains an arbitrary number of glyphs")),amentum.docs.core.example.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.cst$kw$source,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$count,1,cljs.core.cst$kw$text,"<span style=\"font-weight:bold;color:red\">(</span><span style=\"font-weight:bold;color:blue\">c/grid</span>\n<span style=\"font-weight:bold;color:yellow\"> :class</span>\n<span style=\"font-weight:bold;color:magenta\"> &quot;doubling five column&quot;</span>\n<span style=\"font-weight:bold;color:red\"> (</span><span style=\"font-weight:bold;color:blue\">map</span>\n<span style=\"font-weight:bold;color:red\">  (</span><span style=\"font-weight:bold;color:blue\">fn*</span> <span style=\"font-weight:bold;color:red\">[</span>p1__16961#<span style=\"font-weight:bold;color:red\">]</span> <span style=\"font-weight:bold;color:red\">(</span><span style=\"font-weight:bold;color:blue\">c/column</span> <span style=\"font-weight:bold;color:red\">(</span><span style=\"font-weight:bold;color:blue\">e/icon</span> p1__16961#<span style=\"font-weight:bold;color:red\">)</span> <span style=\"font-weight:bold;color:red\">(</span><span style=\"font-weight:bold;color:blue\">s/capitalize</span> p1__16961#<span style=\"font-weight:bold;color:red\">)</span><span style=\"font-weight:bold;color:red\">)</span><span style=\"font-weight:bold;color:red\">)</span>\n  web-content-icons<span style=\"font-weight:bold;color:red\">)</span><span style=\"font-weight:bold;color:red\">)</span>"], null),cljs.core.cst$kw$title,"Web Content",cljs.core.cst$kw$class,"icon",(hoplon.core.p.cljs$core$IFn$_invoke$arity$1 ? hoplon.core.p.cljs$core$IFn$_invoke$arity$1("Icons can represent types of content found on websites") : hoplon.core.p.call(null,"Icons can represent types of content found on websites")),amentum.collections.grid.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.cst$kw$class,"doubling five column",cljs.core.map.cljs$core$IFn$_invoke$arity$2((function (p1__16961_SHARP_){
return amentum.collections.column.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([amentum.elements.icon.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([p1__16961_SHARP_], 0)),clojure.string.capitalize(p1__16961_SHARP_)], 0));
}),amentum.docs.views.elements.web_content_icons)], 0))], 0))], 0))], null);
});
amentum.docs.views.elements.header = (function amentum$docs$views$elements$header(){
return new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$header,"Header",cljs.core.cst$kw$sub_DASH_header,"A header provides a short summary of content",cljs.core.cst$kw$content,amentum.docs.core.section.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.cst$kw$title,"Types",amentum.docs.core.example.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.cst$kw$source,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$count,1,cljs.core.cst$kw$text,"<span style=\"font-weight:bold;color:red\">(</span><span style=\"font-weight:bold;color:blue\">let</span>\n<span style=\"font-weight:bold;color:red\"> [</span>hs\n<span style=\"font-weight:bold;color:red\">  [</span><span style=\"font-weight:bold;color:red\">[</span>e/h1 <span style=\"font-weight:bold;color:magenta\">&quot;First&quot;</span><span style=\"font-weight:bold;color:red\">]</span> <span style=\"font-weight:bold;color:red\">[</span>e/h2 <span style=\"font-weight:bold;color:magenta\">&quot;Second&quot;</span><span style=\"font-weight:bold;color:red\">]</span> <span style=\"font-weight:bold;color:red\">[</span>e/h3 <span style=\"font-weight:bold;color:magenta\">&quot;Third&quot;</span><span style=\"font-weight:bold;color:red\">]</span> <span style=\"font-weight:bold;color:red\">[</span>e/h4 <span style=\"font-weight:bold;color:magenta\">&quot;Fourth&quot;</span><span style=\"font-weight:bold;color:red\">]</span> <span style=\"font-weight:bold;color:red\">[</span>e/h5 <span style=\"font-weight:bold;color:magenta\">&quot;Fifth&quot;</span><span style=\"font-weight:bold;color:red\">]</span><span style=\"font-weight:bold;color:red\">]</span><span style=\"font-weight:bold;color:red\">]</span>\n<span style=\"font-weight:bold;color:red\"> (</span><span style=\"font-weight:bold;color:blue\">map</span> <span style=\"font-weight:bold;color:red\">(</span><span style=\"font-weight:bold;color:blue\">fn</span> <span style=\"font-weight:bold;color:red\">[</span><span style=\"font-weight:bold;color:red\">[</span>e t<span style=\"font-weight:bold;color:red\">]</span><span style=\"font-weight:bold;color:red\">]</span> <span style=\"font-weight:bold;color:red\">[</span><span style=\"font-weight:bold;color:red\">(</span><span style=\"font-weight:bold;color:blue\">e</span> t<span style=\"font-weight:bold;color:red\">)</span> <span style=\"font-weight:bold;color:red\">(</span><span style=\"font-weight:bold;color:blue\">h/p</span> lorem<span style=\"font-weight:bold;color:red\">)</span><span style=\"font-weight:bold;color:red\">]</span><span style=\"font-weight:bold;color:red\">)</span> hs<span style=\"font-weight:bold;color:red\">)</span><span style=\"font-weight:bold;color:red\">)</span>"], null),cljs.core.cst$kw$title,"Page Headers",(hoplon.core.p.cljs$core$IFn$_invoke$arity$1 ? hoplon.core.p.cljs$core$IFn$_invoke$arity$1("Headers may be oriented to give the hierarchy of a\n             section in the context of the page") : hoplon.core.p.call(null,"Headers may be oriented to give the hierarchy of a\n             section in the context of the page")),(function (){var G__16980 = cljs.core.cst$kw$class;
var G__16981 = "ui ignored info message";
var G__16982 = "Page headings are sized\n               using rem and are not affected by surrounding content size.";
return (hoplon.core.div.cljs$core$IFn$_invoke$arity$3 ? hoplon.core.div.cljs$core$IFn$_invoke$arity$3(G__16980,G__16981,G__16982) : hoplon.core.div.call(null,G__16980,G__16981,G__16982));
})(),(function (){var hs = new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [amentum.elements.h1,"First"], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [amentum.elements.h2,"Second"], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [amentum.elements.h3,"Third"], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [amentum.elements.h4,"Fourth"], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [amentum.elements.h5,"Fifth"], null)], null);
return cljs.core.map.cljs$core$IFn$_invoke$arity$2(((function (hs){
return (function (p__16983){
var vec__16984 = p__16983;
var e = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__16984,(0),null);
var t = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__16984,(1),null);
return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(e.cljs$core$IFn$_invoke$arity$1 ? e.cljs$core$IFn$_invoke$arity$1(t) : e.call(null,t)),(hoplon.core.p.cljs$core$IFn$_invoke$arity$1 ? hoplon.core.p.cljs$core$IFn$_invoke$arity$1(amentum.docs.views.elements.lorem) : hoplon.core.p.call(null,amentum.docs.views.elements.lorem))], null);
});})(hs))
,hs);
})()], 0)),amentum.docs.core.example.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.cst$kw$source,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$count,1,cljs.core.cst$kw$text,"<span style=\"font-weight:bold;color:red\">(</span><span style=\"font-weight:bold;color:blue\">let</span>\n<span style=\"font-weight:bold;color:red\"> [</span>font-size <span style=\"font-weight:bold;color:red\">(</span><span style=\"font-weight:bold;color:blue\">j/cell</span> <span style=\"color:cyan\">10</span><span style=\"font-weight:bold;color:red\">)</span><span style=\"font-weight:bold;color:red\">]</span>\n<span style=\"font-weight:bold;color:red\"> [</span><span style=\"font-weight:bold;color:red\">(</span><span style=\"font-weight:bold;color:blue\">e/buttons</span>\n<span style=\"font-weight:bold;color:red\">   (</span><span style=\"font-weight:bold;color:blue\">e/button</span> <span style=\"font-weight:bold;color:yellow\">:icon</span> <span style=\"font-weight:bold;color:magenta\">&quot;plus&quot;</span> <span style=\"font-weight:bold;color:yellow\">:click</span> <span style=\"font-weight:bold;color:red\">(</span><span style=\"font-weight:bold;color:blue\">fn*</span> <span style=\"font-weight:bold;color:red\">[</span><span style=\"font-weight:bold;color:red\">]</span> <span style=\"font-weight:bold;color:red\">(</span><span style=\"font-weight:bold;color:blue\">swap!</span> font-size inc<span style=\"font-weight:bold;color:red\">)</span><span style=\"font-weight:bold;color:red\">)</span><span style=\"font-weight:bold;color:red\">)</span>\n<span style=\"font-weight:bold;color:red\">   (</span><span style=\"font-weight:bold;color:blue\">e/button</span> <span style=\"font-weight:bold;color:yellow\">:icon</span> <span style=\"font-weight:bold;color:magenta\">&quot;minus&quot;</span> <span style=\"font-weight:bold;color:yellow\">:click</span> <span style=\"font-weight:bold;color:red\">(</span><span style=\"font-weight:bold;color:blue\">fn*</span> <span style=\"font-weight:bold;color:red\">[</span><span style=\"font-weight:bold;color:red\">]</span> <span style=\"font-weight:bold;color:red\">(</span><span style=\"font-weight:bold;color:blue\">swap!</span> font-size dec<span style=\"font-weight:bold;color:red\">)</span><span style=\"font-weight:bold;color:red\">)</span><span style=\"font-weight:bold;color:red\">)</span><span style=\"font-weight:bold;color:red\">)</span>\n<span style=\"font-weight:bold;color:red\">  (</span><span style=\"font-weight:bold;color:blue\">e/segment</span>\n<span style=\"font-weight:bold;color:yellow\">   :class</span>\n<span style=\"font-weight:bold;color:magenta\">   &quot;vertical&quot;</span>\n<span style=\"font-weight:bold;color:yellow\">   :css</span>\n<span style=\"font-weight:bold;color:red\">   (</span><span style=\"font-weight:bold;color:blue\">j/cell=</span> <span style=\"font-weight:bold;color:red\">{</span><span style=\"font-weight:bold;color:yellow\">:font-size</span> <span style=\"font-weight:bold;color:red\">(</span><span style=\"font-weight:bold;color:blue\">str</span> font-size <span style=\"font-weight:bold;color:magenta\">&quot;pt&quot;</span><span style=\"font-weight:bold;color:red\">)</span><span style=\"font-weight:bold;color:red\">}</span><span style=\"font-weight:bold;color:red\">)</span>\n<span style=\"font-weight:bold;color:red\">   (</span><span style=\"font-weight:bold;color:blue\">map</span>\n<span style=\"font-weight:bold;color:red\">    (</span><span style=\"font-weight:bold;color:blue\">fn</span> <span style=\"font-weight:bold;color:red\">[</span><span style=\"font-weight:bold;color:red\">[</span>e s t<span style=\"font-weight:bold;color:red\">]</span><span style=\"font-weight:bold;color:red\">]</span> <span style=\"font-weight:bold;color:red\">[</span><span style=\"font-weight:bold;color:red\">(</span><span style=\"font-weight:bold;color:blue\">e</span> <span style=\"font-weight:bold;color:yellow\">:class</span> s t<span style=\"font-weight:bold;color:red\">)</span> <span style=\"font-weight:bold;color:red\">(</span><span style=\"font-weight:bold;color:blue\">h/p</span> lorem<span style=\"font-weight:bold;color:red\">)</span><span style=\"font-weight:bold;color:red\">]</span><span style=\"font-weight:bold;color:red\">)</span>\n<span style=\"font-weight:bold;color:red\">    [</span><span style=\"font-weight:bold;color:red\">[</span>e/h1 <span style=\"font-weight:bold;color:magenta\">&quot;huge&quot;</span> <span style=\"font-weight:bold;color:magenta\">&quot;First&quot;</span><span style=\"font-weight:bold;color:red\">]</span>\n<span style=\"font-weight:bold;color:red\">     [</span>e/h2 <span style=\"font-weight:bold;color:magenta\">&quot;large&quot;</span> <span style=\"font-weight:bold;color:magenta\">&quot;Second&quot;</span><span style=\"font-weight:bold;color:red\">]</span>\n<span style=\"font-weight:bold;color:red\">     [</span>e/h3 <span style=\"font-weight:bold;color:magenta\">&quot;medium&quot;</span> <span style=\"font-weight:bold;color:magenta\">&quot;Third&quot;</span><span style=\"font-weight:bold;color:red\">]</span>\n<span style=\"font-weight:bold;color:red\">     [</span>e/h4 <span style=\"font-weight:bold;color:magenta\">&quot;small&quot;</span> <span style=\"font-weight:bold;color:magenta\">&quot;Fourth&quot;</span><span style=\"font-weight:bold;color:red\">]</span>\n<span style=\"font-weight:bold;color:red\">     [</span>e/h5 <span style=\"font-weight:bold;color:magenta\">&quot;tiny&quot;</span> <span style=\"font-weight:bold;color:magenta\">&quot;Fifth&quot;</span><span style=\"font-weight:bold;color:red\">]</span><span style=\"font-weight:bold;color:red\">]</span><span style=\"font-weight:bold;color:red\">)</span><span style=\"font-weight:bold;color:red\">)</span><span style=\"font-weight:bold;color:red\">]</span><span style=\"font-weight:bold;color:red\">)</span>"], null),cljs.core.cst$kw$title,"Content Headers",(hoplon.core.p.cljs$core$IFn$_invoke$arity$1 ? hoplon.core.p.cljs$core$IFn$_invoke$arity$1("Headers may be oriented to give the importance of a\n       section in the context of the content that surrounds it") : hoplon.core.p.call(null,"Headers may be oriented to give the importance of a\n       section in the context of the content that surrounds it")),(function (){var G__16987 = cljs.core.cst$kw$class;
var G__16988 = "ui ignored info message";
var G__16989 = "Content headings are\n       sized with em and are based on the font-size of their\n       container.";
return (hoplon.core.div.cljs$core$IFn$_invoke$arity$3 ? hoplon.core.div.cljs$core$IFn$_invoke$arity$3(G__16987,G__16988,G__16989) : hoplon.core.div.call(null,G__16987,G__16988,G__16989));
})(),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var font_size = javelin.core.cell.cljs$core$IFn$_invoke$arity$1((10));
return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [amentum.elements.buttons.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([amentum.elements.button.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.cst$kw$icon,"plus",cljs.core.cst$kw$click,((function (font_size){
return (function (){
return cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(font_size,cljs.core.inc);
});})(font_size))
], 0)),amentum.elements.button.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.cst$kw$icon,"minus",cljs.core.cst$kw$click,((function (font_size){
return (function (){
return cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(font_size,cljs.core.dec);
});})(font_size))
], 0))], 0)),amentum.elements.segment.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.cst$kw$class,"vertical",cljs.core.cst$kw$css,javelin.core.formula(((function (font_size){
return (function (G__16990){
return new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$font_DASH_size,[cljs.core.str(G__16990),cljs.core.str("pt")].join('')], null);
});})(font_size))
).call(null,font_size),cljs.core.map.cljs$core$IFn$_invoke$arity$2(((function (font_size){
return (function (p__16991){
var vec__16992 = p__16991;
var e = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__16992,(0),null);
var s = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__16992,(1),null);
var t = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__16992,(2),null);
return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__16995 = cljs.core.cst$kw$class;
var G__16996 = s;
var G__16997 = t;
return (e.cljs$core$IFn$_invoke$arity$3 ? e.cljs$core$IFn$_invoke$arity$3(G__16995,G__16996,G__16997) : e.call(null,G__16995,G__16996,G__16997));
})(),(hoplon.core.p.cljs$core$IFn$_invoke$arity$1 ? hoplon.core.p.cljs$core$IFn$_invoke$arity$1(amentum.docs.views.elements.lorem) : hoplon.core.p.call(null,amentum.docs.views.elements.lorem))], null);
});})(font_size))
,new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [amentum.elements.h1,"huge","First"], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [amentum.elements.h2,"large","Second"], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [amentum.elements.h3,"medium","Third"], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [amentum.elements.h4,"small","Fourth"], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [amentum.elements.h5,"tiny","Fifth"], null)], null))], 0))], null);
})()], null)], 0))], 0))], null);
});
